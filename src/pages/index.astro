---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import GenealogyGraph from "../components/GenealogyGraph.astro";
import Footer from "../components/Footer.astro";
import jsonData from "@/data/sample_tree.json";
//import jsonData from "@/data/extended_tree.json";
import type {TreeDataType} from "@/types";
import {getTranslations, translations, type Language} from "../i18n/index";

const genealogyData: TreeDataType = jsonData;

// For now, we'll default to English on the server side
// The client will handle language detection and updates
const currentLanguage: Language = "en";
const t = getTranslations(currentLanguage);
---

<Layout
  title={t.pageTitle}
  description={t.pageDescription}
  language={currentLanguage}>
  <main class='app-container'>
    <Header language={currentLanguage} translations={t} />
    <GenealogyGraph
      data={genealogyData}
      language={currentLanguage}
      translations={t}
    />
    <Footer language={currentLanguage} translations={t} />
  </main>
</Layout>

<script is:inline define:vars={{translationsData: JSON.stringify(translations)}}
>
  // Use translations from the i18n system
  window.genealogyTranslations = JSON.parse(translationsData);
  window.currentLanguage = "en";

  window.updatePageLanguage = function (language) {
    const t =
      window.genealogyTranslations[language] || window.genealogyTranslations.en;

    // Update page title and meta
    document.title = t.pageTitle;
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute("content", t.pageDescription);
    }
    document.documentElement.lang = language;

    // Trigger a custom event to update components
    window.dispatchEvent(
      new CustomEvent("languageChanged", {
        detail: {language: language, translations: t},
      })
    );
  };

  window.detectAndSetLanguage = function () {
    const urlParams = new URLSearchParams(window.location.search);
    const urlLang = urlParams.get("lang");
    const storedLang = localStorage.getItem("genealogy-language");

    let selectedLanguage = "en";

    if (urlLang && ["en", "fr", "de"].includes(urlLang)) {
      selectedLanguage = urlLang;
      localStorage.setItem("genealogy-language", urlLang);
    } else if (storedLang && ["en", "fr", "de"].includes(storedLang)) {
      selectedLanguage = storedLang;
      // Update URL to reflect stored preference
      const url = new URL(window.location.href);
      url.searchParams.set("lang", selectedLanguage);
      window.history.replaceState({}, "", url.toString());
    }

    if (selectedLanguage !== window.currentLanguage) {
      window.currentLanguage = selectedLanguage;
      window.updatePageLanguage(window.currentLanguage);
    }
  };

  document.addEventListener("DOMContentLoaded", window.detectAndSetLanguage);

  // Handle language changes from the language switcher
  window.addEventListener("languageChanged", function (event) {
    const language = event.detail.language;
    if (language !== window.currentLanguage) {
      window.currentLanguage = language;
      localStorage.setItem("genealogy-language", language);

      // Update URL
      const url = new URL(window.location.href);
      url.searchParams.set("lang", language);
      window.history.replaceState({}, "", url.toString());
    }
  });
</script>

<style>
  .app-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    font-family:
      -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  }

  /* Global styles */
  :global(body) {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }

  :global(*) {
    box-sizing: border-box;
  }
</style>
