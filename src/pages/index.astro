---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import GenealogyGraph from "../components/GenealogyGraph.astro";
import Footer from "../components/Footer.astro";

import {getTranslations, translations, type Language} from "../i18n/index.ts";

// For now, we'll default to English on the server side
// The client will handle language detection and updates
const currentLanguage: Language = "en";
const t = getTranslations(currentLanguage);
---

<Layout
  title={t.pageTitle}
  description={t.pageDescription}
  language={currentLanguage}>
  <main class='app-container'>
    <Header language={currentLanguage} translations={t} />
    <GenealogyGraph language={currentLanguage} translations={t} />
    <Footer language={currentLanguage} translations={t} />
  </main>
</Layout>

<script
  is:inline
  define:vars={{
    translationsData: JSON.stringify(translations),
  }}
>
  console.log(
    "‚û°Ô∏è index: <script is:inline define:vars={{translationsData: JSON.stringify(translations)}}>"
  );

  // Use translations from the i18n system
  window.genealogyTranslations = JSON.parse(translationsData);
  window.currentLanguage = "en";

  //   window.updatePageLanguage = updatePageLanguage;

  //   function updatePageLanguage(language) {
  //     console.log("üçÖ index: updatePageLanguage:", language);

  //     const t =
  //       window.genealogyTranslations[language] || window.genealogyTranslations.en;

  //     // Update page title and meta
  //     document.title = t.pageTitle;
  //     const metaDescription = document.querySelector('meta[name="description"]');
  //     if (metaDescription) {
  //       metaDescription.setAttribute("content", t.pageDescription);
  //     }
  //     document.documentElement.lang = language;

  //     // Trigger a custom event to update components
  //     window.dispatchEvent(
  //       new CustomEvent("languageChanged", {
  //         detail: {language: language, translations: t},
  //       })
  //     );
  //   }

  //   // Initial language detection
  //   window.detectAndSetLanguage();
</script>

<script is:inline type='module'>
  console.log("‚û°Ô∏è index: <script is:inline type='module'>");

  import {AppLanguages} from "/utility/AppLanguages.js";
  // Use the AppLanguages singleton for all translations management
  const appLanguages = AppLanguages.ensureOneExists();
  appLanguages.subscribe((newTranslations) => {
    console.log(
      "üëç index: AppLanguages:",
      appLanguages.getLanguage(),
      appLanguages.getAvailableLanguages("index")
    );
  });

  // Initial language detection
  //   window.detectAndSetLanguage();

  //   // Handle language changes from the language switcher
  //   window.addEventListener("languageChanged", function (event) {
  //     const language = event.detail.language;
  //     if (language !== window.currentLanguage) {
  //       window.currentLanguage = language;
  //       localStorage.setItem("genealogy-language", language);

  //       // Update URL
  //       const url = new URL(window.location.href);
  //       url.searchParams.set("lang", language);
  //       window.history.replaceState({}, "", url.toString());
  //     }
  //   });
</script>

<style>
  .app-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    font-family:
      -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  }

  /* Global styles */
  :global(body) {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }

  :global(*) {
    box-sizing: border-box;
  }
</style>
