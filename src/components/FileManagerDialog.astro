---
/**
  FileManagerDialog.astro

  This component manages the file import/export dialog for the genealogy app.
  It allows users to download the current tree, download all trees, upload new tree data,
  and view file information.

  Key features:
  - Download current tree as JSON
  - Download all trees as a single JSON file
  - Upload tree data in JSON format with options to merge, replace, or create new tree
  - Drag-and-drop file upload support
  - File information display (name, size, type, person count, export date)

  Integration:
  - Integrates with appData for state management and tree operations
  - Uses translations for multi-language support

  Usage:
  - To open the dialog: window.fileManagerDialog.show();
  - To close the dialog: window.fileManagerDialog.hide();

  Note:
  - All state management and tree operations are now handled via appData (see /utility/AppData.js)
  - Any previous references to appData have been updated to appData for clarity and consistency.
  - Use appData.getState(), appData.getTreeData(), etc. for all tree and person operations.
*/

import type {Language, Translations} from "../i18n/index";

interface Props {
  language: Language;
  translations: Translations;
}

const {translations} = Astro.props;
---

<!-- File Manager Dialog (initially hidden) -->
<div id='file-manager-dialog' class='dialog-overlay' style='display: none;'>
  <div class='dialog-content file-manager-dialog'>
    <div class='dialog-header'>
      <h2>{translations.manageFiles}</h2>
      <button id='file-manager-close' class='close-button' aria-label='Close'>
        √ó
      </button>
    </div>

    <div class='dialog-body'>
      <!-- Download Section -->
      <div class='file-section'>
        <h3>{translations.downloadSection}</h3>
        <div class='file-operations'>
          <button
            id='download-current-tree'
            class='operation-button download-button'>
            {translations.downloadCurrentTree}
          </button>
          <button
            id='download-all-trees'
            class='operation-button download-button'>
            {translations.downloadAllTrees}
          </button>
        </div>
      </div>

      <!-- Upload Section -->
      <div class='file-section'>
        <h3>{translations.uploadSection}</h3>
        <div class='file-operations'>
          <div class='upload-area'>
            <input
              type='file'
              id='file-upload-input'
              accept='.json'
              style='display: none;'
            />
            <div id='upload-drop-zone' class='upload-drop-zone'>
              <div class='upload-content'>
                <div class='upload-icon'>üìÅ</div>
                <p>{translations.dragDropOrClick}</p>
                <button
                  id='select-file-button'
                  class='operation-button upload-button'>
                  {translations.selectFile}
                </button>
              </div>
            </div>
          </div>
          <div class='upload-options'>
            <div class='radio-group'>
              <label>
                <input type='radio' name='upload-mode' value='merge' />
                {translations.mergeWithExisting}
              </label>
              <label>
                <input type='radio' name='upload-mode' value='replace' />
                {translations.replaceExisting}
              </label>
              <label>
                <input
                  type='radio'
                  name='upload-mode'
                  value='new-tree'
                  checked
                />
                {translations.createNewTreeFile}
              </label>
            </div>
            <div id='file-manager-tree-name-input' style='display: none;'>
              <input
                type='text'
                id='file-manager-tree-name'
                placeholder={translations.enterTreeName}
                maxlength='100'
              />
            </div>
            <div class='upload-actions'>
              <button
                id='confirm-upload'
                class='operation-button confirm-button'
                disabled>
                {translations.confirmUpload}
              </button>
              <button id='cancel-upload' class='operation-button cancel-button'>
                {translations.cancel}
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- File Information Section -->
      <div id='file-info-section' class='file-section' style='display: none;'>
        <h3>{translations.fileInformation}</h3>
        <div id='file-info-content'></div>
      </div>
    </div>
  </div>
</div>

<style>
  .dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(15, 23, 42, 0.75),
      rgba(15, 23, 42, 0.6)
    );
    backdrop-filter: blur(8px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .dialog-content {
    background: linear-gradient(145deg, #ffffff, #f8fafc);
    padding: 0;
    border-radius: 20px;
    box-shadow:
      0 25px 50px -12px rgba(0, 0, 0, 0.25),
      0 0 0 1px rgba(255, 255, 255, 0.05);
    position: relative;
    border: 1px solid rgba(226, 232, 240, 0.5);
    overflow: hidden;
    animation: slideUp 0.3s ease-out;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .dialog-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 28px 32px 20px;
    margin-bottom: 0;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 50%, #cbd5e1 100%);
    border-bottom: 1px solid rgba(148, 163, 184, 0.2);
    position: relative;
  }

  .dialog-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(148, 163, 184, 0.3),
      transparent
    );
  }

  .dialog-header h2 {
    margin: 0;
    color: #1e293b;
    font-size: 24px;
    font-weight: 700;
    letter-spacing: -0.025em;
  }

  .close-button {
    background: rgba(148, 163, 184, 0.1);
    border: 1px solid rgba(148, 163, 184, 0.2);
    font-size: 24px;
    cursor: pointer;
    color: #475569;
    padding: 0;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
  }

  .close-button:hover {
    background: rgba(148, 163, 184, 0.2);
    border-color: rgba(148, 163, 184, 0.3);
    color: #334155;
    transform: scale(1.05);
  }

  .close-button:active {
    transform: scale(0.95);
  }

  .dialog-body {
    max-height: none;
    overflow: visible;
    padding: 32px;
    background: linear-gradient(145deg, #ffffff, #f8fafc);
  }

  .file-manager-dialog {
    max-width: 700px;
    width: 95vw;
    max-height: none;
    height: auto;
  }

  .file-section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background-color: #f8f9fa;
    min-height: 100px;
    display: block;
    position: relative;
  }

  .file-section h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: #495057;
    font-size: 18px;
    font-weight: 600;
    display: block;
  }

  .file-operations {
    display: flex;
    flex-direction: column;
    gap: 15px;
    align-items: stretch;
  }

  /* Download buttons side by side */
  .file-section .file-operations {
    flex-direction: row;
    gap: 10px;
  }

  .file-section .file-operations .operation-button {
    flex: 1;
    min-width: 0;
  }

  /* Upload section keeps vertical layout */
  .upload-area {
    width: 100%;
  }

  /* Upload section side-by-side layout */
  .upload-area + .upload-options {
    margin-top: 0;
    margin-left: 10px;
    flex: 1;
    min-width: 0;
  }

  /* Make upload section horizontal */
  .file-section:nth-child(2) .file-operations {
    flex-direction: row;
    align-items: flex-start;
    gap: 10px;
  }

  .upload-area {
    flex: 1;
    min-width: 0;
  }

  .operation-button {
    padding: 12px 20px;
    border: 2px solid;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    background: white;
    min-width: 200px;
    text-align: center;
    flex-shrink: 0;
  }

  .download-button {
    border-color: #007acc;
    color: #007acc;
    background: linear-gradient(135deg, #ffffff 0%, #f0f8ff 100%);
    display: block;
    width: 100%;
  }

  .download-button:hover {
    background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 122, 204, 0.3);
  }

  .upload-button {
    border-color: #28a745;
    color: #28a745;
    background: linear-gradient(135deg, #ffffff 0%, #f0fff4 100%);
    display: block;
  }

  .upload-button:hover {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
  }

  .confirm-button {
    border-color: #007acc;
    color: white;
    background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
  }

  .confirm-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #005c99 0%, #004080 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 122, 204, 0.4);
  }

  .confirm-button:disabled {
    background: linear-gradient(135deg, #cccccc 0%, #999999 100%);
    border-color: #cccccc;
    color: #666666;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .cancel-button {
    border-color: #6c757d;
    color: #6c757d;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
  }

  .cancel-button:hover {
    background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
    color: white;
    transform: translateY(-2px);
  }

  .upload-area {
    width: 100%;
  }

  .upload-drop-zone {
    border: 2px dashed #dee2e6;
    border-radius: 12px;
    padding: 20px 20px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    min-height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .upload-drop-zone:hover,
  .upload-drop-zone.drag-over {
    border-color: #28a745;
    background-color: #f0fff4;
    transform: scale(1.02);
  }

  .upload-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
  }

  .upload-icon {
    font-size: 48px;
    opacity: 0.6;
  }

  .upload-drop-zone p {
    margin: 0;
    color: #6c757d;
    font-size: 14px;
  }

  .radio-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin: 10px 0;
  }

  .radio-group label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    padding: 6px 8px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    font-size: 13px;
  }

  .radio-group label:hover {
    background-color: rgba(0, 122, 204, 0.1);
  }

  .radio-group input[type="radio"] {
    margin: 0;
  }

  #file-manager-tree-name-input {
    margin-top: 10px;
  }

  #file-manager-tree-name {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 14px;
  }

  .upload-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    justify-content: flex-end;
  }

  .upload-actions .operation-button {
    min-width: 120px;
  }

  #file-info-content {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .file-info-item {
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .file-info-label {
    font-weight: 600;
    color: #495057;
  }

  .file-info-value {
    color: #6c757d;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .file-manager-dialog {
      width: 95vw;
      max-height: 95vh;
    }

    .file-section {
      padding: 15px;
    }

    .operation-button {
      min-width: 120px;
      font-size: 13px;
    }

    /* Stack download buttons vertically on mobile */
    .file-section .file-operations {
      flex-direction: column;
      gap: 10px;
    }

    .file-section .file-operations .operation-button {
      width: 100%;
    }

    /* Stack upload area and options vertically on mobile */
    .file-section:nth-child(2) .file-operations {
      flex-direction: column;
      gap: 15px;
    }

    .upload-area + .upload-options {
      margin-left: 0;
      margin-top: 0;
    }

    .radio-group label {
      font-size: 14px;
      padding: 8px;
    }

    .upload-drop-zone {
      padding: 30px 15px;
      min-height: 100px;
    }

    .upload-icon {
      font-size: 36px;
    }

    .upload-actions {
      flex-direction: column;
    }

    .upload-actions .operation-button {
      min-width: auto;
      width: 100%;
    }
  }

  .disabled {
    opacity: 0.5 !important;
    pointer-events: none !important;
    cursor: not-allowed !important;
  }
</style>
<script is:inline type='module' define:vars={{translations}}>
  import {AppData} from "/utility/AppData.js";
  import {AppLanguages} from "/utility/AppLanguages.js";

  // --- 1. Variable declarations and singletons ---
  const appData = AppData.ensureOneExists();
  const appLanguages = AppLanguages.ensureOneExists();

  // DOM elements
  const fileManagerDialog = document.getElementById("file-manager-dialog");
  const fileManagerClose = document.getElementById("file-manager-close");
  const downloadCurrentTreeBtn = document.getElementById(
    "download-current-tree"
  );
  const downloadAllTreesBtn = document.getElementById("download-all-trees");
  const fileUploadInput = document.getElementById("file-upload-input");
  const uploadDropZone = document.getElementById("upload-drop-zone");
  const selectFileButton = document.getElementById("select-file-button");
  const newTreeNameInput = document.getElementById(
    "file-manager-tree-name-input"
  );
  const newTreeName = document.getElementById("file-manager-tree-name");
  const confirmUploadBtn = document.getElementById("confirm-upload");
  const cancelUploadBtn = document.getElementById("cancel-upload");
  const fileInfoSection = document.getElementById("file-info-section");
  const fileInfoContent = document.getElementById("file-info-content");

  let currentTranslations; // Will be set in updateFileManagerTranslations
  let selectedFile = null;

  // --- 2. Main execution flow ---

  // Subscribe to language changes
  appLanguages.subscribe((newTranslations) => {
    updateFileManagerTranslations(newTranslations);
    console.log("FileManagerDialog: newTranslations", newTranslations);
  }, "FileManagerDialog");

  // Listen for languageChanged event (from outside)
  //   window.addEventListener("languageChanged", function (event) {
  //     updateFileManagerTranslations(event.detail.translations);
  //   });

  // Set up all event listeners
  setupEventListeners();

  // Expose dialog globally
  window.fileManagerDialog = {
    show: showFileManager,
    hide: hideFileManager,
  };

  // Initialize with correct language immediately
  //   updateFileManagerTranslations(currentTranslations);

  // --- 3. Function definitions ---

  function updateFileManagerTranslations(newTranslations) {
    currentTranslations = newTranslations;

    // Update button texts
    if (downloadCurrentTreeBtn)
      downloadCurrentTreeBtn.textContent =
        currentTranslations.downloadCurrentTree;
    if (downloadAllTreesBtn)
      downloadAllTreesBtn.textContent = currentTranslations.downloadAllTrees;
    if (selectFileButton)
      selectFileButton.textContent = currentTranslations.selectFile;
    if (confirmUploadBtn)
      confirmUploadBtn.textContent = currentTranslations.confirmUpload;
    if (cancelUploadBtn)
      cancelUploadBtn.textContent = currentTranslations.cancel;

    // Update section headers
    const dialogTitle = document.querySelector("#file-manager-dialog h2");
    const downloadSectionTitle = document.querySelector(".file-section h3");
    const uploadSectionTitle = document.querySelectorAll(".file-section h3")[1];
    const fileInfoTitle = document.querySelector("#file-info-section h3");

    if (dialogTitle) dialogTitle.textContent = currentTranslations.manageFiles;
    if (downloadSectionTitle)
      downloadSectionTitle.textContent = currentTranslations.downloadSection;
    if (uploadSectionTitle)
      uploadSectionTitle.textContent = currentTranslations.uploadSection;
    if (fileInfoTitle)
      fileInfoTitle.textContent = currentTranslations.fileInformation;

    // Update drag/drop text
    const dragDropText = document.querySelector(".upload-drop-zone p");
    if (dragDropText)
      dragDropText.textContent = currentTranslations.dragDropOrClick;

    // Update placeholder
    if (newTreeName)
      newTreeName.placeholder = currentTranslations.enterTreeName;

    // Update radio button labels
    const radioLabels = document.querySelectorAll(".radio-group label");
    if (radioLabels.length >= 3) {
      const radioTexts = [
        currentTranslations.mergeWithExisting,
        currentTranslations.replaceExisting,
        currentTranslations.createNewTreeFile,
      ];
      radioLabels.forEach((label, index) => {
        if (radioTexts[index]) {
          const input = label.querySelector('input[type="radio"]');
          if (input) {
            label.innerHTML = "";
            label.appendChild(input);
            label.appendChild(document.createTextNode(radioTexts[index]));
          }
        }
      });
    }
  }

  function setupEventListeners() {
    if (fileManagerClose) {
      fileManagerClose.addEventListener("click", hideFileManager);
    }
    if (downloadCurrentTreeBtn) {
      downloadCurrentTreeBtn.addEventListener("click", downloadCurrentTree);
    }
    if (downloadAllTreesBtn) {
      downloadAllTreesBtn.addEventListener("click", downloadAllTrees);
    }
    if (selectFileButton) {
      selectFileButton.addEventListener("click", (event) => {
        event.stopPropagation();
        fileUploadInput.click();
      });
    }
    if (fileUploadInput) {
      fileUploadInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) handleFileSelect(file);
      });
    }
    if (uploadDropZone) {
      uploadDropZone.addEventListener("click", () => {
        fileUploadInput.click();
      });
      uploadDropZone.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadDropZone.classList.add("drag-over");
      });
      uploadDropZone.addEventListener("dragleave", () => {
        uploadDropZone.classList.remove("drag-over");
      });
      uploadDropZone.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadDropZone.classList.remove("drag-over");
        const files = e.dataTransfer.files;
        if (files.length > 0) handleFileSelect(files[0]);
      });
    }
    document.addEventListener("change", (e) => {
      if (e.target.name === "upload-mode") {
        const selectedValue = e.target.value;
        saveUploadModeToStorage();
        if (selectedValue === "new-tree") {
          if (newTreeNameInput) newTreeNameInput.style.display = "block";
        } else {
          if (newTreeNameInput) newTreeNameInput.style.display = "none";
        }
      }
    });
    if (confirmUploadBtn) {
      confirmUploadBtn.addEventListener("click", confirmUpload);
    }
    if (cancelUploadBtn) {
      cancelUploadBtn.addEventListener("click", hideFileManager);
    }
    if (fileManagerDialog) {
      fileManagerDialog.addEventListener("click", (e) => {
        if (e.target === fileManagerDialog) hideFileManager();
      });
    }
  }

  function showFileManager() {
    fileManagerDialog.style.display = "flex";
    loadUploadModeFromStorage();
    resetUploadState();
  }

  function hideFileManager() {
    fileManagerDialog.style.display = "none";
    resetUploadState();
  }

  function resetUploadState() {
    selectedFile = null;
    if (fileInfoSection) fileInfoSection.style.display = "none";
    if (fileUploadInput) fileUploadInput.value = "";
    if (newTreeName) newTreeName.value = "";
    if (selectFileButton) {
      selectFileButton.disabled = false;
      selectFileButton.classList.remove("disabled");
    }
    if (uploadDropZone) {
      uploadDropZone.classList.remove("disabled");
      uploadDropZone.style.pointerEvents = "auto";
      uploadDropZone.style.opacity = "1";
    }
    if (confirmUploadBtn) confirmUploadBtn.disabled = true;
  }

  function saveUploadModeToStorage() {
    const selectedMode = document.querySelector(
      'input[name="upload-mode"]:checked'
    )?.value;
    if (selectedMode)
      localStorage.setItem("fileManager-uploadMode", selectedMode);
  }

  function loadUploadModeFromStorage() {
    const savedMode =
      localStorage.getItem("fileManager-uploadMode") || "new-tree";
    const radioButton = document.querySelector(
      `input[name="upload-mode"][value="${savedMode}"]`
    );
    if (radioButton) {
      radioButton.checked = true;
      if (savedMode === "new-tree") {
        if (newTreeNameInput) newTreeNameInput.style.display = "block";
      } else {
        if (newTreeNameInput) newTreeNameInput.style.display = "none";
      }
    }
  }

  function downloadCurrentTree() {
    try {
      const currentState = appData.getState();
      const currentTreeName = currentState.currentTreeName || "current-tree";
      const currentTreeData = currentState.genealogyData?.persons
        ? {persons: currentState.genealogyData.persons}
        : null;
      if (!currentTreeData || !currentTreeData.persons.length) return;
      const dataToDownload = {
        type: "single-tree",
        treeName: currentTreeName,
        data: currentTreeData,
        exportDate: new Date().toISOString(),
        version: "1.0",
      };
      const blob = new Blob([JSON.stringify(dataToDownload, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `${currentTreeName}_${new Date().toISOString().split("T")[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("FileManager: Error downloading current tree:", error);
    }
  }

  function downloadAllTrees() {
    try {
      const currentState = appData.getState();
      const allTrees = {};
      const availableTrees = currentState.availableTrees || [];
      const currentTreeName = currentState.currentTreeName || "";
      if (availableTrees.length === 0) return;
      for (const treeName of availableTrees) {
        const treeData = appData.getTreeData(treeName);
        if (treeData) allTrees[treeName] = treeData;
      }
      const dataToDownload = {
        type: "all-trees",
        selectedTree: currentTreeName,
        trees: allTrees,
        exportDate: new Date().toISOString(),
        version: "1.0",
      };
      const blob = new Blob([JSON.stringify(dataToDownload, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `all_trees_${new Date().toISOString().split("T")[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("FileManager: Error downloading all trees:", error);
    }
  }

  function handleFileSelect(file) {
    selectedFile = file;
    if (selectFileButton) {
      selectFileButton.disabled = true;
      selectFileButton.classList.add("disabled");
    }
    if (uploadDropZone) {
      uploadDropZone.classList.add("disabled");
      uploadDropZone.style.pointerEvents = "none";
      uploadDropZone.style.opacity = "0.5";
    }
    if (confirmUploadBtn) confirmUploadBtn.disabled = false;
    if (!file.name.endsWith(".json")) return;
    if (newTreeName) {
      const suggestedName = file.name.replace(/\.json$/i, "");
      newTreeName.value = suggestedName;
    }
    const reader = new FileReader();
    reader.onload = function (e) {
      try {
        const data = JSON.parse(e.target.result);
        displayFileInfo(data, file);
        if (confirmUploadBtn) confirmUploadBtn.disabled = false;
      } catch (error) {
        console.error("FileManager: Error parsing file:", error);
      }
    };
    reader.readAsText(file);
  }

  function displayFileInfo(data, file) {
    let infoHtml = `
      <div class="file-info-item">
        <span class="file-info-label">${currentTranslations.fileName || "File Name"}:</span>
        <span class="file-info-value">${file.name}</span>
      </div>
      <div class="file-info-item">
        <span class="file-info-label">${currentTranslations.fileSize || "File Size"}:</span>
        <span class="file-info-value">${(file.size / 1024).toFixed(1)} KB</span>
      </div>
    `;
    if (data.type === "single-tree") {
      infoHtml += `
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.fileType || "Type"}:</span>
          <span class="file-info-value">${currentTranslations.singleTree || "Single Tree"}</span>
        </div>
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.treeName || "Tree Name"}:</span>
          <span class="file-info-value">${data.treeName || "Unknown"}</span>
        </div>
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.personCount || "Persons"}:</span>
          <span class="file-info-value">${data.data?.persons?.length || 0}</span>
        </div>
      `;
    } else if (data.type === "all-trees") {
      const treeCount = Object.keys(data.trees || {}).length;
      let totalPersons = 0;
      Object.values(data.trees || {}).forEach((tree) => {
        totalPersons += tree.persons?.length || 0;
      });
      infoHtml += `
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.fileType || "Type"}:</span>
          <span class="file-info-value">${currentTranslations.allTrees || "All Trees"}</span>
        </div>
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.treeCount || "Trees"}:</span>
          <span class="file-info-value">${treeCount}</span>
        </div>
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.totalPersons || "Total Persons"}:</span>
          <span class="file-info-value">${totalPersons}</span>
        </div>
      `;
      if (data.selectedTree) {
        infoHtml += `
          <div class="file-info-item">
            <span class="file-info-label">${currentTranslations.activeTree || "Selected Tree"}:</span>
            <span class="file-info-value">${data.selectedTree}</span>
          </div>
        `;
      }
    } else {
      infoHtml += `
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.fileType || "Type"}:</span>
          <span class="file-info-value">Raw Tree Data</span>
        </div>
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.personCount || "Persons"}:</span>
          <span class="file-info-value">${data?.persons?.length || 0}</span>
        </div>
      `;
    }
    if (data.exportDate) {
      infoHtml += `
        <div class="file-info-item">
          <span class="file-info-label">${currentTranslations.exportDate || "Export Date"}:</span>
          <span class="file-info-value">${new Date(data.exportDate).toLocaleDateString()}</span>
        </div>
      `;
    }
    fileInfoContent.innerHTML = infoHtml;
    fileInfoSection.style.display = "block";
  }

  async function confirmUpload() {
    if (!selectedFile) return;
    const uploadMode = document.querySelector(
      'input[name="upload-mode"]:checked'
    )?.value;
    const reader = new FileReader();
    reader.onload = async function (e) {
      try {
        const data = JSON.parse(e.target.result);
        await processUpload(data, uploadMode);
        hideFileManager();
      } catch (error) {
        console.error("FileManager: Error processing upload:", error);
      }
    };
    reader.readAsText(selectedFile);
  }

  async function processUpload(data, uploadMode) {
    if (data.type === "single-tree") {
      await processSingleTreeUpload(data, uploadMode);
    } else if (data.type === "all-trees") {
      await processAllTreesUpload(data, uploadMode);
    } else {
      const wrappedData = {
        type: "single-tree",
        treeName: selectedFile.name.replace(".json", "") || "Imported Tree",
        data: data,
      };
      await processSingleTreeUpload(wrappedData, uploadMode);
    }
  }

  async function processSingleTreeUpload(data, uploadMode) {
    const treeData = data.data;
    if (uploadMode === "new-tree") {
      const customTreeName = newTreeName.value.trim();
      if (!customTreeName) return;
      const currentState = appData.getState();
      if (currentState.availableTrees.includes(customTreeName)) return;
      const createSuccess = appData.createTreeWithData(
        customTreeName,
        treeData.persons || []
      );
      if (createSuccess) {
        appData.switchToTree(customTreeName);
      }
    } else if (uploadMode === "replace") {
      appData.replaceCurrentTreeData(treeData.persons || []);
    } else {
      appData.mergeDataIntoCurrentTree(treeData.persons || []);
    }
  }

  async function processAllTreesUpload(data, uploadMode) {
    const importedTrees = data.trees || {};
    const importedSelectedTree = data.selectedTree;
    for (const [treeName, treeData] of Object.entries(importedTrees)) {
      const currentState = appData.getState();
      if (currentState.availableTrees.includes(treeName)) {
        if (uploadMode === "merge") {
          appData.switchToTree(treeName);
          appData.mergeDataIntoCurrentTree(treeData.persons || []);
        } else if (uploadMode === "replace") {
          appData.switchToTree(treeName);
          appData.replaceCurrentTreeData(treeData.persons || []);
        }
      } else {
        appData.createTreeWithData(treeName, treeData.persons || []);
      }
    }
    const finalState = appData.getState();
    if (
      importedSelectedTree &&
      finalState.availableTrees.includes(importedSelectedTree)
    ) {
      appData.switchToTree(importedSelectedTree);
    }
  }
</script>
