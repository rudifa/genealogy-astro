---
import LanguageSwitcher from "./LanguageSwitcher.astro";
import TreeSwitcher from "./TreeSwitcher.astro";

// This component is now self-sufficient and does not require any props.
// It connects directly to the App singleton for its data.
---

<div class='toolbar' data-cy='toolbar'>
  <LanguageSwitcher />
  <TreeSwitcher />
  <button
    id='add-button'
    type='button'
    title='Add a new person to current tree'
    data-cy='add-person-button'>Add Person</button
  >
  <button
    id='clear-button'
    type='button'
    title='Remove all persons from current tree'
    data-cy='clear-all-button'>Clear All</button
  >
  <button
    id='print-button'
    type='button'
    title='Print the current genealogy graph'
    >Print Graph</button
  >

  <div class='mode-separator'></div>
  <button
    id='mode-toggle-button'
    type='button'
    title='Go to Forest Mode'
    class='mode-toggle'
    data-cy='mode-toggle-button'>...</button
  >
  <div class='mode-separator'></div>

  <button
    <button
    id='manage-trees-button'
    type='button'
    title='Create, switch, delete or merge family trees'
    data-cy='tree-manager'>Manage Trees</button
  >
  <button
    id='manage-files-button'
    type='button'
    title='Upload or download family tree data files'
    data-cy='file-manager'>Manage Files</button
  >
  <div id='loading-indicator' class='loading-indicator' style='display: none;'>
    <div class='spinner'></div>
    <span>Loading...</span>
  </div>
</div>

<style>
  .toolbar {
    width: 180px;
    background-color: #f8f9fa;
    border-right: 1px solid #dee2e6;
    padding: 20px 15px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);
  }

  .toolbar button {
    padding: 12px 16px;
    border: 2px solid #dee2e6;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    color: #495057;
    min-width: 150px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .toolbar button:hover {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-color: #adb5bd;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:focus {
    outline: none;
    border-color: #007acc;
    box-shadow:
      0 0 0 3px rgba(0, 122, 204, 0.15),
      0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:disabled {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    color: #6c757d;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    border-color: #dee2e6;
  }

  #add-button {
    background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
    color: white;
    border-color: #007acc;
  }

  #add-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #005c99 0%, #004080 100%);
    border-color: #005c99;
  }

  #clear-button {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    color: white;
    border-color: #dc3545;
  }

  #clear-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #c82333 0%, #bd2130 100%);
    border-color: #bd2130;
  }

  #print-button {
    background: linear-gradient(135deg, #bfa046 0%, #8c7a2a 100%) !important;
    color: white !important;
    border-color: #bfa046 !important;
    font-weight: 600;
  }
  #print-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #8c7a2a 0%, #6c5a1e 100%) !important;
    border-color: #8c7a2a !important;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(191, 160, 70, 0.18);
  }

  #manage-trees-button {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    border-color: #28a745;
    font-weight: 600;
    position: relative;
  }

  #manage-trees-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #218838 0%, #1c7430 100%);
    border-color: #1e7e34;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(40, 167, 69, 0.3);
  }

  #manage-trees-button:before {
    content: "";
    margin-right: 0px;
    font-size: 16px;
  }

  #manage-files-button {
    background: linear-gradient(135deg, #6f42c1 0%, #5a2d9f 100%);
    color: white;
    border-color: #6f42c1;
    font-weight: 600;
    position: relative;
  }

  #manage-files-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #5a2d9f 0%, #4a247a 100%);
    border-color: #5a2d9f;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(111, 66, 193, 0.3);
  }

  #manage-files-button:before {
    content: "";
    margin-right: 0px;
    font-size: 16px;
  }

  .mode-separator {
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      #dee2e6 50%,
      transparent 100%
    );
    margin: 8px 0;
  }

  .mode-toggle {
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    color: white;
    border: none;
    font-weight: bold;
    font-size: 18px;
    padding: 8px 16px !important;
    min-height: 40px;
    letter-spacing: 2px;
  }

  .mode-toggle:hover:not(:disabled) {
    background: linear-gradient(135deg, #5a6268 0%, #343a40 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
  }

  .mode-toggle:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.3);
  }

  /* Hide manage buttons in one tree mode */
  .toolbar.one-tree-mode #manage-trees-button,
  .toolbar.one-tree-mode #manage-files-button {
    display: none;
  }

  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    padding: 10px;
    font-size: 12px;
    color: #6c757d;
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #007acc;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .toolbar {
      width: 160px;
      padding: 15px 12px;
      gap: 10px;
    }

    .toolbar button {
      min-width: 130px;
      font-size: 13px;
      padding: 10px 14px;
    }
  }

  @media (max-width: 480px) {
    .toolbar {
      width: 140px;
      padding: 12px 8px;
      gap: 8px;
    }

    .toolbar button {
      min-width: 120px;
      font-size: 12px;
      padding: 8px 12px;
    }

    .loading-indicator {
      font-size: 11px;
    }
  }
</style>

<script is:inline type='module'>
  import {App} from "/utility/App.js";

  // --- 1. Variable declarations and singletons ---
  const app = App.ensureAppExists();

  // DOM elements
  const toolbar = document.querySelector(".toolbar");
  const addButton = document.getElementById("add-button");
  const clearButton = document.getElementById("clear-button");
  const printButton = document.getElementById("print-button");
  const modeToggleButton = document.getElementById("mode-toggle-button");
  const manageTreesButton = document.getElementById("manage-trees-button");
  const manageFilesButton = document.getElementById("manage-files-button");
  const loadingIndicator = document.getElementById("loading-indicator");
  const loadingText = document.querySelector("#loading-indicator span");

  let currentTranslations = null;
  let isOneTreeMode = localStorage.getItem("genealogy-ui-mode") !== "forest";

  // --- 2. Main execution flow ---

  // Subscribe to language changes
  app.translations.subscribe((newTranslations) => {
    updateToolbarTranslations(newTranslations);
    console.log("👍 Toolbar: newTranslations:", newTranslations);
  }, "Toolbar");

  // Subscribe to UI state for loading indicator
  app.uiState.subscribe((uiState) => {
    setLoadingState(uiState.isRendering);
  }, "Toolbar-UIState");

  // Initialize toolbar events and mode display
  setupToolbarEvents();
  updateModeDisplay();
  // Set initial state from the singleton
  const initialUiState = app.uiState.getState();
  setLoadingState(initialUiState.isRendering);

  // --- 3. Function definitions ---

  function updateToolbarTranslations(newTranslations) {
    currentTranslations = newTranslations;
    if (addButton) {
      addButton.textContent = currentTranslations.addPerson;
      addButton.title = currentTranslations.addPersonTooltip;
    }
    if (clearButton) {
      clearButton.textContent = currentTranslations.clearAll;
      clearButton.title = currentTranslations.clearAllTooltip;
    }
    if (printButton) {
      printButton.textContent = currentTranslations.printGraph || "Print Graph";
      printButton.title =
        currentTranslations.printGraphTooltip ||
        "Print the current genealogy graph";
    }
    if (manageTreesButton) {
      manageTreesButton.textContent = currentTranslations.manageTrees;
      manageTreesButton.title = currentTranslations.manageTreesTooltip;
    }
    if (manageFilesButton) {
      manageFilesButton.textContent = currentTranslations.manageFiles;
      manageFilesButton.title = currentTranslations.manageFilesTooltip;
    }
    if (loadingText) loadingText.textContent = currentTranslations.loading;

    updateModeDisplay();
  }

  function updateModeDisplay() {
    if (!toolbar || !modeToggleButton) return;

    if (isOneTreeMode) {
      toolbar.classList.add("one-tree-mode");
      modeToggleButton.title =
        currentTranslations?.goToForestMode || "Go to Forest Mode";
    } else {
      toolbar.classList.remove("one-tree-mode");
      modeToggleButton.title =
        currentTranslations?.goToOneTreeMode || "Go to One Tree Mode";
    }
  }

  function toggleMode() {
    isOneTreeMode = !isOneTreeMode;
    localStorage.setItem(
      "genealogy-ui-mode",
      isOneTreeMode ? "one-tree" : "forest"
    );
    updateModeDisplay();

    const notificationKey = isOneTreeMode
      ? "switchedToOneTreeMode"
      : "switchedToForestMode";
    const message =
      currentTranslations?.[notificationKey] ||
      `Switched to ${isOneTreeMode ? "One Tree Mode" : "Forest Mode"}`;
    app.uiState.showNotification(message, "info");
  }

  function setLoadingState(loading) {
    if (!loadingIndicator || !addButton || !clearButton) return;

    loadingIndicator.style.display = loading ? "flex" : "none";
    addButton.disabled = loading;
    clearButton.disabled = loading;
    printButton.disabled = loading;
    modeToggleButton.disabled = loading;
    manageTreesButton.disabled = loading;
    manageFilesButton.disabled = loading;
  }

  function setupToolbarEvents() {
    // Add button event
    if (addButton) {
      addButton.addEventListener("click", () => {
        try {
          if (app.uiState.getState().isRendering) return;
          const newPerson = {name: "", mother: null, father: null};
          app.uiState.openDialog("editPerson", newPerson);
        } catch (error) {
          console.error("Error opening add dialog:", error);
          app.uiState.showNotification(
            currentTranslations?.errorOpening ||
              "Error opening add person dialog",
            "error"
          );
        }
      });
    }

    // Clear button event
    if (clearButton) {
      clearButton.addEventListener("click", async () => {
        try {
          if (app.uiState.getState().isRendering) return;
          const state = app.data.getState();
          if (!state.genealogyData) {
            console.warn("No genealogy data available");
            return;
          }
          const personCount = state.genealogyData.persons.length;
          if (personCount === 0) {
            app.uiState.showNotification(
              currentTranslations?.noDataToClear || "No data to clear",
              "info"
            );
            return;
          }
          const confirmMessage = currentTranslations?.confirmClear
            ? currentTranslations.confirmClear
                .replace("{count}", personCount)
                .replace(
                  "{people}",
                  personCount === 1
                    ? currentTranslations.person
                    : currentTranslations.people
                )
            : `Are you sure you want to remove all ${personCount} ${personCount === 1 ? "person" : "people"} from the genealogy? This action cannot be undone.`;

          if (confirm(confirmMessage)) {
            app.data.clearAllPersons();
            app.uiState.showNotification(
              currentTranslations?.clearedAllPersons ||
                `Cleared all ${personCount} ${personCount === 1 ? "person" : "people"}`,
              "success"
            );
          }
        } catch (error) {
          console.error("Error clearing data:", error);
          app.uiState.showNotification(
            currentTranslations?.errorClearingData ||
              "Error clearing genealogy data",
            "error"
          );
        }
      });
    }

    // Print button event
    if (printButton) {
      printButton.addEventListener("click", async () => {
        try {
          const svg = document.querySelector(".genealogy-graph svg");
          if (!svg) {
            app.uiState.showNotification(
              currentTranslations?.errorRenderingGraph || "No graph to print",
              "error"
            );
            return;
          }
          const module = await import("/utility/PrintGraph.js");
          module.printGraph(
            svg.outerHTML,
            currentTranslations?.printGraphTitle || "Genealogy Graph"
          );
        } catch (error) {
          console.error("Error printing graph:", error);
          app.uiState.showNotification(
            currentTranslations?.errorPrintingGraph || "Error printing graph",
            "error"
          );
        }
      });
    }

    // Mode toggle button event
    if (modeToggleButton) {
      modeToggleButton.addEventListener("click", () => {
        try {
          toggleMode();
        } catch (error) {
          console.error("Error toggling mode:", error);
        }
      });
    }

    // Manage trees button event
    if (manageTreesButton) {
      manageTreesButton.addEventListener("click", () => {
        try {
          if (app.uiState.getState().isRendering) return;
          app.uiState.openDialog("treeManager");
        } catch (error) {
          console.error("Error opening tree management:", error);
          app.uiState.showNotification(
            currentTranslations?.errorOpeningTreeManagement ||
              "Error opening tree management",
            "error"
          );
        }
      });
    }

    // Manage files button event
    if (manageFilesButton) {
      manageFilesButton.addEventListener("click", () => {
        try {
          if (app.uiState.getState().isRendering) return;
          app.uiState.openDialog("fileManager");
        } catch (error) {
          console.error("Error opening file management:", error);
          app.uiState.showNotification(
            currentTranslations?.errorOpeningFileManager ||
              "Error opening file management",
            "error"
          );
        }
      });
    }

    // Keyboard shortcut: Ctrl/Cmd + N for new person
    document.addEventListener("keydown", (event) => {
      if (
        (event.ctrlKey || event.metaKey) &&
        event.key === "n" &&
        !app.uiState.getState().isRendering
      ) {
        event.preventDefault();
        if (addButton) addButton.click();
      }
    });
  }
</script>
