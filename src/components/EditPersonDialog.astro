---
// This component is a simple, static dialog.
// All logic to show, hide, and handle its form is in the client-side
// script of the GenealogyGraph component.
---

<div id='edit-dialog' class='dialog-overlay' style='display: none;'>
  <div class='dialog-content'>
    <h2>Edit Person</h2>
    <form id='edit-form'>
      <input type='hidden' id='original-name' name='originalName' />
      <div>
        <label for='person-name'>Name:</label>
        <input type='text' id='person-name' name='name' required />
      </div>
      <div>
        <label for='person-mother'>Mother:</label>
        <input type='text' id='person-mother' name='mother' />
      </div>
      <div>
        <label for='person-father'>Father:</label>
        <input type='text' id='person-father' name='father' />
      </div>
      <div class='dialog-buttons'>
        <button type='submit' id='save-button'>Save</button>
        <button type='button' id='remove-button'>Remove</button>
        <button type='button' id='cancel-button'>Cancel</button>
      </div>
    </form>
  </div>
</div>

<style>
  .dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .dialog-content {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    min-width: 450px;
  }
  .dialog-content h2 {
    margin-top: 0;
  }
  .dialog-content div {
    margin-bottom: 15px;
  }
  .dialog-content label {
    display: block;
    margin-bottom: 5px;
  }
  .dialog-content input {
    width: 100%;
    padding: 8px;
    box-sizing: border-box;
  }
  .dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }
</style>

<script type='module'>
  export function initializeEditDialog(
    genealogyData,
    genealogySvgString,
    graphContainer
  ) {
    // --- Get references to dialog elements ---
    const dialog = document.getElementById("edit-dialog");
    const form = document.getElementById("edit-form");
    const originalNameInput = document.getElementById("original-name");
    const nameInput = document.getElementById("person-name");
    const motherInput = document.getElementById("person-mother");
    const fatherInput = document.getElementById("person-father");
    const saveButton = document.getElementById("save-button");
    const cancelButton = document.getElementById("cancel-button");
    const removeButton = document.getElementById("remove-button");

    // --- Dialog functions ---
    function openEditDialog(person) {
      originalNameInput.value = person.name;
      nameInput.value = person.name;
      motherInput.value = person.mother || "";
      fatherInput.value = person.father || "";
      dialog.style.display = "flex";
    }

    function closeEditDialog() {
      dialog.style.display = "none";
    }

    // --- Dialog event listeners ---
    // Cancel button closes the dialog
    cancelButton.addEventListener("click", closeEditDialog);

    // Save button updates the genealogy data and closes the dialog
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const updatedPerson = {
        name: nameInput.value,
        mother: motherInput.value || null,
        father: fatherInput.value || null,
      };

      genealogyData.updatePerson(originalNameInput.value, updatedPerson);

      console.log("Updated data:", genealogyData);

      // Re-render the graph with the updated data
      if (graphContainer) {
        const newSvgString = await genealogySvgString(genealogyData);
        graphContainer.innerHTML = newSvgString;
        console.log("Updated svg:", newSvgString);
      }

      closeEditDialog();
    });

    // Remove button removes the person from genealogy data
    removeButton.addEventListener("click", async () => {
      const personName = originalNameInput.value;
      if (confirm(`Are you sure you want to remove ${personName}?`)) {
        genealogyData.removePerson(personName);

        // Re-render the graph with the updated data
        if (graphContainer) {
          const newSvgString = await genealogySvgString(genealogyData);
          graphContainer.innerHTML = newSvgString;
        }

        closeEditDialog();
      }
    });

    // Return the openEditDialog function so it can be called from outside
    return {openEditDialog};
  }

  // Make the function available globally
  window.initializeEditDialog = initializeEditDialog;
</script>
