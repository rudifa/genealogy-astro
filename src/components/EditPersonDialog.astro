---
import type {Language, Translations} from "../i18n/index";

interface Props {
  language: Language;
  translations: Translations;
}

const {language, translations} = Astro.props;

// This component is a simple, static dialog.
// All logic to show, hide, and handle its form is in the client-side
// script of the GenealogyGraph component.
---

<div id='edit-dialog' class='dialog-overlay' style='display: none;'>
  <div class='dialog-content'>
    <h2>{translations.editPerson}</h2>
    <div id='error-message' class='error-message' style='display: none;'></div>
    <form id='edit-form'>
      <input type='hidden' id='original-name' name='originalName' />
      <div class='form-field'>
        <label for='person-name'
          >{translations.name}: <span class='required'
            >{translations.required}</span
          ></label
        >
        <input
          type='text'
          id='person-name'
          name='name'
          required
          maxlength='100'
          autocomplete='off'
          data-1p-ignore
        />
        <div class='field-error' id='name-error'></div>
      </div>
      <div class='form-field'>
        <label for='person-mother'>{translations.mother}:</label>
        <input
          type='text'
          id='person-mother'
          name='mother'
          maxlength='100'
          autocomplete='off'
          data-1p-ignore
        />
        <div class='field-error' id='mother-error'></div>
      </div>
      <div class='form-field'>
        <label for='person-father'>{translations.father}:</label>
        <input
          type='text'
          id='person-father'
          name='father'
          maxlength='100'
          autocomplete='off'
          data-1p-ignore
        />
        <div class='field-error' id='father-error'></div>
      </div>
      <div class='form-field'>
        <label for='person-info'>{translations.info}:</label>
        <input
          type='text'
          id='person-info'
          name='info'
          maxlength='200'
          autocomplete='off'
          data-1p-ignore
          placeholder='e.g., Birth year, profession, location...'
        />
        <div class='field-error' id='info-error'></div>
      </div>
      <div class='dialog-buttons'>
        <button type='submit' id='save-button'>{translations.save}</button>
        <button type='button' id='remove-button'>{translations.remove}</button>
        <button type='button' id='cancel-button'>{translations.cancel}</button>
      </div>
    </form>
  </div>
</div>

<style>
  .dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .dialog-content {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    min-width: 450px;
  }
  .dialog-content h2 {
    margin-top: 0;
    color: #333;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
  }

  .form-field {
    margin-bottom: 15px;
  }

  .form-field label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
  }

  .required {
    color: #e74c3c;
  }

  .form-field input {
    width: 100%;
    padding: 8px 12px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition:
      border-color 0.2s,
      box-shadow 0.2s;
  }

  .form-field input:focus {
    outline: none;
    border-color: #007acc;
    box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
  }

  .form-field input:invalid {
    border-color: #e74c3c;
  }

  .field-error {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 4px;
    min-height: 16px;
  }

  .error-message {
    background-color: #ffeaea;
    color: #e74c3c;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 15px;
    border: 1px solid #f5c6cb;
  }

  .dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #eee;
  }

  .dialog-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition:
      background-color 0.2s,
      transform 0.1s;
  }

  .dialog-buttons button:hover {
    transform: translateY(-1px);
  }

  #save-button {
    background-color: #007acc;
    color: white;
  }

  #save-button:hover {
    background-color: #005c99;
  }

  #save-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  #remove-button {
    background-color: #e74c3c;
    color: white;
  }

  #remove-button:hover {
    background-color: #c0392b;
  }

  #cancel-button {
    background-color: #f8f9fa;
    color: #6c757d;
    border: 1px solid #dee2e6;
  }

  #cancel-button:hover {
    background-color: #e9ecef;
  }
</style>

<script type='module' is:inline>
  export function initializeEditDialog(initialGenealogyTreeData) {
    // Keep a reference to the current genealogy data that can be updated
    let genealogyData = initialGenealogyTreeData;
    // Use global translations, with English as fallback
    let t = window.genealogyTranslations?.[window.currentLanguage] ||
      window.genealogyTranslations?.en || {
        editPerson: "Edit Person",
        addNewPerson: "Add New Person",
        nameRequired: "Name is required",
        nameMaxLength: "Name must be 100 characters or less",
        nameExists: "A person with this name already exists",
        confirmRemove:
          "Are you sure you want to remove {name}? This action cannot be undone.",
        validationErrors: "Please fix the validation errors before saving",
        errorSaving: "An error occurred while saving. Please try again.",
        errorRemoving:
          "An error occurred while removing the person. Please try again.",
        parentNameLength: "{parent} name must be 100 characters or less",
        parentSameName: "{parent} cannot be the same as the person",
      };

    // --- Get references to dialog elements ---
    const dialog = document.getElementById("edit-dialog");
    const form = document.getElementById("edit-form");
    const originalNameInput = document.getElementById("original-name");
    const nameInput = document.getElementById("person-name");
    const motherInput = document.getElementById("person-mother");
    const fatherInput = document.getElementById("person-father");
    const infoInput = document.getElementById("person-info");
    const saveButton = document.getElementById("save-button");
    const cancelButton = document.getElementById("cancel-button");
    const removeButton = document.getElementById("remove-button");
    const errorMessage = document.getElementById("error-message");

    // Error display elements
    const nameError = document.getElementById("name-error");
    const motherError = document.getElementById("mother-error");
    const fatherError = document.getElementById("father-error");
    const infoError = document.getElementById("info-error");

    let isNewPerson = false;

    // Function to update dialog translations
    function updateDialogTranslations(translations) {
      t = translations;

      // Update static text elements
      const dialogTitle = dialog.querySelector("h2");
      const nameLabel = document.querySelector('label[for="person-name"]');
      const motherLabel = document.querySelector('label[for="person-mother"]');
      const fatherLabel = document.querySelector('label[for="person-father"]');
      const infoLabel = document.querySelector('label[for="person-info"]');

      // Update labels
      if (nameLabel)
        nameLabel.innerHTML = `${t.name}: <span class='required'>${t.required}</span>`;
      if (motherLabel) motherLabel.textContent = `${t.mother}:`;
      if (fatherLabel) fatherLabel.textContent = `${t.father}:`;
      if (infoLabel) infoLabel.textContent = `${t.info}:`;

      // Update buttons
      if (saveButton) saveButton.textContent = t.save;
      if (removeButton) removeButton.textContent = t.remove;
      if (cancelButton) cancelButton.textContent = t.cancel;

      // Update dialog title based on current state
      if (dialogTitle && dialog.style.display === "flex") {
        dialogTitle.textContent = isNewPerson ? t.addNewPerson : t.editPerson;
      }
    }

    // Initialize dialog translations on load
    updateDialogTranslations(t);

    // Listen for language changes
    window.addEventListener("languageChanged", function (event) {
      updateDialogTranslations(event.detail.translations);
    });

    // --- Validation functions ---
    function validateName(name) {
      const trimmedName = name.trim();
      if (!trimmedName) {
        return t.nameRequired;
      }
      if (trimmedName.length > 100) {
        return t.nameMaxLength;
      }
      // Check for duplicate names (only for new persons or when name changed)
      if (isNewPerson || trimmedName !== originalNameInput.value) {
        const existingPerson = genealogyData.persons.find(
          (p) => p.name.toLowerCase() === trimmedName.toLowerCase()
        );
        if (existingPerson) {
          return t.nameExists;
        }
      }
      return null;
    }

    function validateParent(parentName, fieldName) {
      if (!parentName.trim()) return null;

      if (parentName.trim().length > 100) {
        return t.parentNameLength.replace("{parent}", fieldName);
      }

      // Check for circular relationship
      const currentName = nameInput.value.trim();
      if (parentName.trim().toLowerCase() === currentName.toLowerCase()) {
        return t.parentSameName.replace("{parent}", fieldName);
      }

      return null;
    }

    function validateInfo(info) {
      if (!info.trim()) return null;

      if (info.trim().length > 200) {
        return "Info must be 200 characters or less";
      }

      return null;
    }

    function clearErrors() {
      errorMessage.style.display = "none";
      nameError.textContent = "";
      motherError.textContent = "";
      fatherError.textContent = "";
      infoError.textContent = "";
    }

    function showError(message) {
      errorMessage.textContent = message;
      errorMessage.style.display = "block";
    }

    function validateForm() {
      clearErrors();
      let isValid = true;

      // Validate name
      const nameValidation = validateName(nameInput.value);
      if (nameValidation) {
        nameError.textContent = nameValidation;
        isValid = false;
      }

      // Validate mother
      const motherValidation = validateParent(motherInput.value, "Mother");
      if (motherValidation) {
        motherError.textContent = motherValidation;
        isValid = false;
      }

      // Validate father
      const fatherValidation = validateParent(fatherInput.value, "Father");
      if (fatherValidation) {
        fatherError.textContent = fatherValidation;
        isValid = false;
      }

      // Validate info
      const infoValidation = validateInfo(infoInput.value);
      if (infoValidation) {
        infoError.textContent = infoValidation;
        isValid = false;
      }

      saveButton.disabled = !isValid;
      return isValid;
    }

    // --- Dialog functions ---
    function openEditDialog(person) {
      isNewPerson = !person.name;
      originalNameInput.value = person.name || "";
      nameInput.value = person.name || "";
      motherInput.value = person.mother || "";
      fatherInput.value = person.father || "";
      infoInput.value = person.info || "";

      // Update dialog title
      const title = dialog.querySelector("h2");
      title.textContent = isNewPerson ? t.addNewPerson : t.editPerson;

      // Show/hide remove button based on whether this is a new person
      removeButton.style.display = isNewPerson ? "none" : "block";

      clearErrors();
      validateForm();
      dialog.style.display = "flex";

      // Focus on name input
      setTimeout(() => nameInput.focus(), 100);
    }

    function closeEditDialog() {
      dialog.style.display = "none";
      clearErrors();
    }

    function emitDataChanged() {
      // Emit a custom event to notify that the data has changed
      const event = new CustomEvent("genealogy-data-changed", {
        detail: {genealogyData},
      });
      document.dispatchEvent(event);
    }

    // --- Dialog event listeners ---
    // Real-time validation
    nameInput.addEventListener("input", validateForm);
    motherInput.addEventListener("input", validateForm);
    fatherInput.addEventListener("input", validateForm);
    infoInput.addEventListener("input", validateForm);

    // Cancel button closes the dialog
    cancelButton.addEventListener("click", closeEditDialog);

    // Close dialog when clicking overlay
    dialog.addEventListener("click", (e) => {
      if (e.target === dialog) {
        closeEditDialog();
      }
    });

    // Handle Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && dialog.style.display === "flex") {
        closeEditDialog();
      }
    });

    // Save button updates the genealogy data and closes the dialog
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!validateForm()) {
        showError(t.validationErrors);
        return;
      }

      try {
        const updatedPerson = {
          name: nameInput.value.trim(),
          mother: motherInput.value.trim() || null,
          father: fatherInput.value.trim() || null,
          info: infoInput.value.trim() || null,
        };

        genealogyData.updatePerson(originalNameInput.value, updatedPerson);

        closeEditDialog();
        emitDataChanged();
      } catch (error) {
        console.error("Error saving person:", error);
        showError(t.errorSaving);
      }
    });

    // Remove button removes the person from genealogy data
    removeButton.addEventListener("click", async () => {
      const personName = originalNameInput.value;
      const confirmMessage = t.confirmRemove.replace("{name}", personName);
      if (confirm(confirmMessage)) {
        try {
          genealogyData.removePerson(personName);
          closeEditDialog();
          emitDataChanged();
        } catch (error) {
          console.error("Error removing person:", error);
          showError(t.errorRemoving);
        }
      }
    });

    // Function to update the genealogy data reference
    function updateGenealogyTreeData(newGenealogyTreeData) {
      genealogyData = newGenealogyTreeData;
      console.log(
        "EditPersonDialog updated with new genealogy data:",
        genealogyData
      );
    }

    // Return the openEditDialog function and update function so they can be called from outside
    return {openEditDialog, updateGenealogyTreeData};
  }

  // Make the function available globally
  window.initializeEditDialog = initializeEditDialog;
</script>
