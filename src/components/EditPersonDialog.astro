---
// This component is now self-sufficient and does not require any props.
// It connects directly to the App singleton for its data.

// This component is a simple, static dialog.
// All logic to show, hide, and handle its form is in the client-side
// script of the GenealogyGraph component.
---

<div
  id='edit-dialog'
  class='dialog-overlay'
  style='display: none;'
  data-cy='edit-dialog'>
  <div class='dialog-content'>
    <div class='dialog-header'>
      <h2>Edit Person</h2> <!-- Default text, updated by script -->
      <button
        id='close-edit-dialog'
        class='close-button'
        type='button'
        aria-label='Close'>Ã—</button
      >
    </div>
    <div class='dialog-body'>
      <div id='error-message' class='error-message' style='display: none;'>
      </div>
      <form id='edit-form'>
        <input type='hidden' id='original-name' name='originalName' />
        <div class='form-field'>
          <label for='person-name'
            >Name: <span class='required'
              >Required</span
            ></label
          >
          <input
            type='text'
            id='person-name'
            name='name'
            required
            maxlength='100'
            autocomplete='off'
            data-1p-ignore
          />
          <div class='field-error' id='name-error'></div>
        </div>
        <div class='form-field'>
          <label for='person-mother'>Mother:</label>
          <input
            type='text'
            id='person-mother'
            name='mother'
            maxlength='100'
            autocomplete='off'
            data-1p-ignore
            data-cy='mother-input'
          />
          <div class='field-error' id='mother-error'></div>
        </div>
        <div class='form-field'>
          <label for='person-father'>Father:</label>
          <input
            type='text'
            id='person-father'
            name='father'
            maxlength='100'
            autocomplete='off'
            data-1p-ignore
            data-cy='father-input'
          />
          <div class='field-error' id='father-error'></div>
        </div>
        <div class='form-field'>
          <label for='person-info'>Info:</label>
          <input
            type='text'
            id='person-info'
            name='info'
            maxlength='200'
            autocomplete='off'
            data-1p-ignore
            data-cy='info-input'
            placeholder='
            e.g.,
            Birth
            year,
            profession,
            location...'
          />
          <div class='field-error' id='info-error'></div>
        </div>
        <div class='dialog-buttons'>
          <button type='submit' id='save-button' data-cy='save-button'
            >Save</button
          >
          <button type='button' id='remove-button' data-cy='remove-button'
            >Remove</button
          >
          <button type='button' id='cancel-button' data-cy='cancel-button'
            >Cancel</button
          >
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  .dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(15, 23, 42, 0.75),
      rgba(15, 23, 42, 0.6)
    );
    backdrop-filter: blur(8px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .dialog-content {
    background: linear-gradient(145deg, #ffffff, #f8fafc);
    padding: 0;
    border-radius: 20px;
    box-shadow:
      0 25px 50px -12px rgba(0, 0, 0, 0.25),
      0 0 0 1px rgba(255, 255, 255, 0.05);
    max-width: 700px;
    width: 95vw;
    min-width: 450px;
    border: 1px solid rgba(226, 232, 240, 0.5);
    overflow: hidden;
    animation: slideUp 0.3s ease-out;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .dialog-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 28px 32px 20px;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 50%, #cbd5e1 100%);
    border-bottom: 1px solid rgba(148, 163, 184, 0.2);
    position: relative;
  }

  .dialog-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(148, 163, 184, 0.3),
      transparent
    );
  }

  .dialog-header h2 {
    margin: 0;
    color: #1e293b;
    font-size: 24px;
    font-weight: 700;
    letter-spacing: -0.025em;
  }

  .close-button {
    background: rgba(148, 163, 184, 0.1);
    border: 1px solid rgba(148, 163, 184, 0.2);
    font-size: 24px;
    cursor: pointer;
    color: #475569;
    padding: 0;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
  }

  .close-button:hover {
    background: rgba(148, 163, 184, 0.2);
    border-color: rgba(148, 163, 184, 0.3);
    color: #334155;
    transform: scale(1.05);
  }

  .close-button:active {
    transform: scale(0.95);
  }

  .dialog-body {
    padding: 32px;
    background: linear-gradient(145deg, #ffffff, #f8fafc);
  }

  .form-field {
    margin-bottom: 15px;
  }

  .form-field label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
  }

  .required {
    color: #e74c3c;
  }

  .form-field input {
    width: 100%;
    padding: 8px 12px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition:
      border-color 0.2s,
      box-shadow 0.2s;
  }

  .form-field input:focus {
    outline: none;
    border-color: #007acc;
    box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
  }

  .form-field input:invalid {
    border-color: #e74c3c;
  }

  .field-error {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 4px;
    min-height: 16px;
  }

  .error-message {
    background-color: #ffeaea;
    color: #e74c3c;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 15px;
    border: 1px solid #f5c6cb;
  }

  .dialog-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #eee;
  }

  .dialog-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition:
      background-color 0.2s,
      transform 0.1s;
  }

  .dialog-buttons button:hover {
    transform: translateY(-1px);
  }

  #save-button {
    background-color: #007acc;
    color: white;
  }

  #save-button:hover {
    background-color: #005c99;
  }

  #save-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  #remove-button {
    background-color: #e74c3c;
    color: white;
  }

  #remove-button:hover {
    background-color: #c0392b;
  }

  #cancel-button {
    background-color: #f8f9fa;
    color: #6c757d;
    border: 1px solid #dee2e6;
  }

  #cancel-button:hover {
    background-color: #e9ecef;
  }
</style>

<script type='module' is:inline>
  console.log("ðŸ”¥ EditPersonDialog: ", "setup starts");

  // 1. Imports and variable declarations

  import {App} from "/utility/App.js";

  // --- Singletons ---
  const app = App.ensureAppExists();

  // --- DOM references ---
  const dialog = document.getElementById("edit-dialog");
  const form = document.getElementById("edit-form");
  const originalNameInput = document.getElementById("original-name");
  const nameInput = document.getElementById("person-name");
  const motherInput = document.getElementById("person-mother");
  const fatherInput = document.getElementById("person-father");
  const infoInput = document.getElementById("person-info");
  const saveButton = document.getElementById("save-button");
  const cancelButton = document.getElementById("cancel-button");
  const closeButton = document.getElementById("close-edit-dialog");
  const removeButton = document.getElementById("remove-button");
  const errorMessage = document.getElementById("error-message");
  const nameError = document.getElementById("name-error");
  const motherError = document.getElementById("mother-error");
  const fatherError = document.getElementById("father-error");
  const infoError = document.getElementById("info-error");

  let isNewPerson = false;

  let translations; // updateDialogTranslations will set this

  // 2. Main execution flow

  // Subscribe to language changes
  app.translations.subscribe((newTranslations) => {
    updateDialogTranslations(newTranslations);
    console.log("ðŸ”¥ EditPersonDialog: newTranslations:", newTranslations);
  }, "EditPersonDialog-Translations");

  // Expose dialog open function globally
  window.openEditDialog = openEditDialog;

  // Set up all event listeners
  setupEventListeners();
  console.log("ðŸ”¥ EditPersonDialog: ", "setup complete");

  // 3. Function definitions

  // --- Translation helpers ---
  function updateDialogTranslations(newTranslations) {
    translations = newTranslations;
    console.log("ðŸ”¥ EditPersonDialog: updated translations:", translations);
    const dialogTitle = dialog.querySelector("h2");
    const nameLabel = document.querySelector('label[for="person-name"]');
    const motherLabel = document.querySelector('label[for="person-mother"]');
    const fatherLabel = document.querySelector('label[for="person-father"]');
    const infoLabel = document.querySelector('label[for="person-info"]');
    if (nameLabel)
      nameLabel.innerHTML = `${translations.name}: <span class='required'>${translations.required}</span>`;
    if (motherLabel) motherLabel.textContent = `${translations.mother}:`;
    if (fatherLabel) fatherLabel.textContent = `${translations.father}:`;
    if (infoLabel) infoLabel.textContent = `${translations.info}:`;
    if (saveButton) saveButton.textContent = translations.save;
    if (removeButton) removeButton.textContent = translations.remove;
    if (cancelButton) cancelButton.textContent = translations.cancel;
    if (dialogTitle && dialog.style.display === "flex") {
      dialogTitle.textContent = isNewPerson
        ? translations.addNewPerson
        : translations.editPerson;
    }
  }

  // --- Validation ---
  function validateName(name) {
    const trimmedName = name.trim();
    if (!trimmedName) return translations.nameRequired;
    if (trimmedName.length > 100) return translations.nameMaxLength;
    if (
      isNewPerson ||
      trimmedName.toLowerCase() !== originalNameInput.value.toLowerCase()
    ) {
      const state = app.data.getState();
      const existingPerson = state.genealogyData.persons.find(
        (p) => p.name.toLowerCase() === trimmedName.toLowerCase()
      );
      if (existingPerson) return translations.nameExists;
    }
    return null;
  }
  function validateParent(parentName, fieldName) {
    if (!parentName.trim()) return null;
    if (parentName.trim().length > 100)
      return (
        translations.parentNameLength ||
        "{parent} name must be 100 characters or less"
      ).replace("{parent}", fieldName);
    if (
      parentName.trim().toLowerCase() === nameInput.value.trim().toLowerCase()
    )
      return (
        translations.parentSameName ||
        "{parent} cannot be the same as the person"
      ).replace("{parent}", fieldName);
    return null;
  }
  function validateInfo(info) {
    if (!info.trim()) return null;
    if (info.trim().length > 200) return "Info must be 200 characters or less";
    return null;
  }
  function clearErrors() {
    errorMessage.style.display = "none";
    nameError.textContent = "";
    motherError.textContent = "";
    fatherError.textContent = "";
    infoError.textContent = "";
  }
  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.style.display = "block";
  }
  function validateForm() {
    clearErrors();
    let isValid = true;
    const nameValidation = validateName(nameInput.value);
    if (nameValidation) {
      nameError.textContent = nameValidation;
      isValid = false;
    }
    const motherValidation = validateParent(motherInput.value, "Mother");
    if (motherValidation) {
      motherError.textContent = motherValidation;
      isValid = false;
    }
    const fatherValidation = validateParent(fatherInput.value, "Father");
    if (fatherValidation) {
      fatherError.textContent = fatherValidation;
      isValid = false;
    }
    const infoValidation = validateInfo(infoInput.value);
    if (infoValidation) {
      infoError.textContent = infoValidation;
      isValid = false;
    }
    saveButton.disabled = !isValid;
    return isValid;
  }

  // --- Dialog logic ---
  function openEditDialog(person) {
    // refreshTranslations();
    isNewPerson = !person.name;
    originalNameInput.value = person.name || "";
    nameInput.value = person.name || "";
    motherInput.value = person.mother || "";
    fatherInput.value = person.father || "";
    infoInput.value = person.info || "";
    const title = dialog.querySelector("h2");
    title.textContent = isNewPerson
      ? translations.addNewPerson
      : translations.editPerson;
    removeButton.style.display = isNewPerson ? "none" : "block";
    clearErrors();
    validateForm();
    dialog.style.display = "flex";
    setTimeout(() => nameInput.focus(), 100);
  }
  function closeEditDialog() {
    dialog.style.display = "none";
    clearErrors();
  }

  // --- Event listeners ---
  function setupEventListeners() {
    nameInput.addEventListener("input", validateForm);
    motherInput.addEventListener("input", validateForm);
    fatherInput.addEventListener("input", validateForm);
    infoInput.addEventListener("input", validateForm);
    cancelButton.addEventListener("click", closeEditDialog);
    if (closeButton) closeButton.addEventListener("click", closeEditDialog);
    dialog.addEventListener("click", (e) => {
      if (e.target === dialog) closeEditDialog();
    });
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && dialog.style.display === "flex")
        closeEditDialog();
    });
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!validateForm()) {
        showError(translations.validationErrors);
        return;
      }
      try {
        const updatedPerson = {
          name: nameInput.value.trim(),
          mother: motherInput.value.trim() || null,
          father: fatherInput.value.trim() || null,
          info: infoInput.value.trim() || null,
        };
        app.data.updatePerson(originalNameInput.value, updatedPerson);
        closeEditDialog();
      } catch (error) {
        console.error("Error saving person:", error);
        showError(translations.errorSaving);
      }
    });
    removeButton.addEventListener("click", async () => {
      const personName = originalNameInput.value;
      const confirmMessage = (
        translations.confirmRemove ||
        "Are you sure you want to remove {name}? This action cannot be undone."
      ).replace("{name}", personName);
      if (confirm(confirmMessage)) {
        try {
          app.data.removePerson(personName);
          closeEditDialog();
        } catch (error) {
          console.error("Error removing person:", error);
          showError(translations.errorRemoving);
        }
      }
    });
  }
</script>
