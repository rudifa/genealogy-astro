---
import type {Language, Translations} from "../i18n/index";

export interface Props {
  currentTree: string;
  language: Language;
  translations: Translations;
}

const {currentTree, language, translations} = Astro.props;
---

<div class='tree-switcher'>
  <select id='tree-select' class='tree-select'>
    <option value={currentTree} selected>
      ðŸŒ³ {currentTree}
    </option>
  </select>
</div>

<style>
  .tree-switcher {
    display: flex;
    justify-content: center;
    margin-bottom: 12px;
    padding: 8px;
    border-bottom: 1px solid #e9ecef;
    background: linear-gradient(135deg, #e8f5e8 0%, #f0f8f0 100%);
    border-radius: 6px 6px 0 0;
  }

  .tree-select {
    padding: 8px 12px;
    border: 2px solid #28a745;
    border-radius: 8px;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(40, 167, 69, 0.1);
    min-width: 150px;
    text-align: center;
    color: #155724;
  }

  .tree-select:hover {
    border-color: #20c997;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.15);
  }

  .tree-select:focus {
    outline: none;
    border-color: #007acc;
    box-shadow:
      0 0 0 3px rgba(0, 122, 204, 0.15),
      0 4px 8px rgba(40, 167, 69, 0.15);
  }

  .tree-select:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(40, 167, 69, 0.1);
  }

  .tree-select option {
    font-size: 13px;
    padding: 8px 12px;
    background: white;
    color: #495057;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .tree-select {
      font-size: 13px;
      padding: 6px 10px;
      min-width: 130px;
    }

    .tree-select option {
      font-size: 12px;
      padding: 6px 10px;
    }
  }

  @media (max-width: 480px) {
    .tree-select {
      font-size: 12px;
      padding: 5px 8px;
      min-width: 120px;
    }

    .tree-select option {
      font-size: 11px;
      padding: 5px 8px;
    }
  }
</style>

<script is:inline type='module'>
  // ðŸŽ¯ Direct import - VS Code can navigate to definition!
  import {appState} from "/utility/State.js";

  // Initialize immediately since DOM is already ready in inline scripts
  const treeSelect = document.getElementById("tree-select");
  let unsubscribe = null;

  function updateTreeOptions() {
    if (!treeSelect || !appState) return;

    try {
      // ðŸŽ¯ Direct method call with VS Code auto-completion!
      const state = appState.getState();
      const availableTrees = state.availableTrees;
      const currentTree = state.currentTreeName;

      // Clear existing options
      treeSelect.innerHTML = "";

      // Add all available trees
      availableTrees.forEach((treeName) => {
        const option = document.createElement("option");
        option.value = treeName;
        option.textContent = `ðŸŒ³ ${treeName}`;
        option.selected = treeName === currentTree;
        treeSelect.appendChild(option);
      });

      console.log(
        "Updated tree options:",
        availableTrees,
        "Current:",
        currentTree
      );
    } catch (error) {
      console.error("Error updating tree options:", error);
    }
  }

  // Subscribe to state changes
  function initializeStateSubscription() {
    // ðŸŽ¯ Direct subscription - appState is imported, no need for null check!
    unsubscribe = appState.subscribe((state) => {
      updateTreeOptions();
    });
    console.log("TreeSwitcher subscribed to state changes");
  }

  // Initialize subscription
  initializeStateSubscription();

  if (treeSelect) {
    // Handle tree selection changes
    treeSelect.addEventListener("change", async function (event) {
      const selectedTree = event.target.value;

      try {
        // ðŸŽ¯ Clean direct access to current state
        const currentTree = appState.getState().currentTreeName;

        if (selectedTree !== currentTree) {
          console.log(`Switching from "${currentTree}" to "${selectedTree}"`);

          // ðŸŽ¯ Direct method call - VS Code shows method signature!
          const success = await appState.switchToTree(selectedTree);

          if (success) {
            console.log(`Successfully switched to tree: ${selectedTree}`);
            // State subscription will automatically update the UI
          } else {
            console.error(`Failed to switch to tree: ${selectedTree}`);
            // Reset selection to current tree
            updateTreeOptions();
          }
        }
      } catch (error) {
        console.error("Error switching tree:", error);
        // Reset selection to current tree
        updateTreeOptions();
      }
    });
  }

  // Listen for language changes to update any translatable content
  window.addEventListener("languageChanged", function (event) {
    // Currently no translatable content in tree switcher, but ready for future
    console.log("TreeSwitcher received language change");
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", function () {
    if (unsubscribe) {
      unsubscribe();
    }
  });
</script>
