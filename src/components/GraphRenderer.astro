---
import type {Language, Translations} from "../i18n/index";

interface Props {
  language: Language;
  translations: Translations;
}

const {language, translations} = Astro.props;
---

<div class='genealogy-graph'>
  <!-- This container will be populated by the client-side script -->
  <div id='graph-placeholder' class='graph-placeholder'>
    <p>{translations.loadingGraph}</p>
  </div>
</div>

<style>
  .genealogy-graph {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    position: relative;
    overflow: auto;
    background-color: #fafafa;
  }

  .graph-placeholder {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
    min-height: 300px;
  }

  .graph-placeholder p {
    text-align: center;
    color: #6c757d;
    font-style: italic;
  }
</style>

<script is:inline type='module' define:vars={{translations}}>
  import {Graphviz} from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@2.13.0/dist/index.js";
  // ðŸŽ¯ Direct import for state management
  import {appState} from "/utility/State.js";

  // Graph Renderer functionality
  function initializeGraphRenderer() {
    console.log("GraphRenderer: Starting initialization");

    // Prevent multiple initializations with a single flag
    if (window.graphRendererInitialized) {
      console.log("GraphRenderer: Already initialized, skipping");
      return;
    }
    window.graphRendererInitialized = true;

    // Initialize Graphviz
    const graphvizPromise = Graphviz.load();

    // Store current translations (will be updated by language changes)
    let currentTranslations = translations;

    // DOM elements are available immediately since they're in the same component
    const graphContainer = document.querySelector(".genealogy-graph");
    const graphPlaceholder = document.getElementById("graph-placeholder");

    if (!graphContainer || !graphPlaceholder) {
      console.error("GraphRenderer: DOM elements not found in component");
      return;
    }

    console.log("GraphRenderer: DOM elements found, setting up functionality");

    // Update graph renderer translations
    function updateGraphRendererTranslations(newTranslations) {
      currentTranslations = newTranslations;

      // Update graph placeholder text
      const graphPlaceholder = document.querySelector("#graph-placeholder p");
      if (graphPlaceholder)
        graphPlaceholder.textContent = currentTranslations.loadingGraph;
    }

    // Listen for language changes
    window.addEventListener("languageChanged", function (event) {
      console.log("GraphRenderer: Language changed to", event.detail.language);
      updateGraphRendererTranslations(event.detail.translations);
    });

    // Initialize graph renderer events and rendering
    function setupGraphFunctionality() {
      console.log("GraphRenderer: Setting up graph functionality");

      // --- Function to convert genealogy data to SVG ---
      async function dotStringToSvg(data) {
        // Convert genealogy data to DOT string
        const dotString = data.genealogyDotString();

        try {
          // Convert DOT string to SVG string using Graphviz
          const graphviz = await graphvizPromise;
          return graphviz.layout(dotString, "svg", "dot");
        } catch (error) {
          console.error("GraphRenderer: Error rendering DOT to SVG:", error);
          throw new Error(`Failed to render graph: ${error.message}`);
        }
      }

      // --- Function to render the graph ---
      async function renderGraph() {
        const showNotification = window.showNotification;
        const setLoadingState = window.setLoadingState;
        const isRendering = window.genealogyIsRendering;

        console.log("GraphRenderer: renderGraph called");

        // Get genealogy data from centralized state instead of window.genealogyData
        let genealogyData = null;
        // ðŸŽ¯ Direct access to state - clean and simple!
        if (appState) {
          const state = appState.getState();
          genealogyData = state.genealogyData;
        } else {
          // Fallback to old approach if state not available
          genealogyData = window.genealogyData;
        }

        console.log("GraphRenderer: genealogyData:", genealogyData);
        console.log(
          "GraphRenderer: persons count:",
          genealogyData?.persons?.length
        );

        if (!graphContainer || isRendering || !genealogyData) {
          // Only warn if it's actually a problem (not just a race condition)
          if (!graphContainer || !genealogyData) {
            console.warn("GraphRenderer: Missing dependencies for rendering");
            console.warn("GraphRenderer: graphContainer:", !!graphContainer);
            console.warn("GraphRenderer: genealogyData:", !!genealogyData);
          } else if (isRendering) {
            console.log(
              "GraphRenderer: Already rendering, skipping duplicate call"
            );
          }
          return;
        }

        try {
          if (setLoadingState) setLoadingState(true);
          window.genealogyIsRendering = true;

          // Hide placeholder if it exists
          if (graphPlaceholder) {
            graphPlaceholder.style.display = "none";
          }

          console.log(
            "GraphRenderer: Converting DOT to SVG for data:",
            genealogyData
          );
          const newSvgString = await dotStringToSvg(genealogyData);
          console.log(
            "GraphRenderer: Received SVG string length:",
            newSvgString?.length
          );

          // Insert the new SVG string into the graph container
          graphContainer.innerHTML = newSvgString;

          // Show success notification for significant changes
          if (genealogyData.persons.length === 0 && showNotification) {
            showNotification(
              currentTranslations.graphCleared || "Graph cleared",
              "info"
            );
          }

          console.log("GraphRenderer: Graph rendered successfully");
        } catch (error) {
          console.error("GraphRenderer: Error rendering graph:", error);
          if (graphPlaceholder) {
            graphPlaceholder.style.display = "block";
            const p = graphPlaceholder.querySelector("p");
            if (p) {
              p.textContent =
                currentTranslations.renderError ||
                "Error rendering graph. Please try again.";
              p.style.color = "#dc3545";
            }
          }
        } finally {
          window.genealogyIsRendering = false;
          if (setLoadingState) setLoadingState(false);
        }
      }

      // --- Graph interaction handler ---
      // Handles clicks on a person box in the graph to open person dialog
      function handleGraphClick(event) {
        try {
          const targetLink = event.target.closest("a");

          if (!targetLink) {
            return;
          }

          const url =
            targetLink.getAttribute("xlink:href") ||
            targetLink.getAttribute("href");

          if (url && url.startsWith("person:")) {
            event.preventDefault();

            const personName = decodeURIComponent(
              url.substring("person:".length)
            );

            console.log("GraphRenderer: Person clicked:", personName);

            // Get genealogy data from centralized state
            let genealogyData = null;
            // ðŸŽ¯ Direct state access for person lookup
            if (appState) {
              const state = appState.getState();
              genealogyData = state.genealogyData;
            } else {
              // Fallback to old approach if state not available
              genealogyData = window.genealogyData;
            }

            if (!genealogyData) {
              console.warn("GraphRenderer: No genealogy data available");
              return;
            }

            const personData = genealogyData.persons.find(
              (p) => p.name === personName
            );

            if (personData) {
              // Use the current openEditDialog function
              const openFn = window.currentOpenEditDialog;
              if (openFn) {
                console.log(
                  "GraphRenderer: Opening edit dialog for:",
                  personName
                );
                openFn(personData);
              } else {
                console.warn(
                  "GraphRenderer: No edit dialog function available"
                );
              }
            } else {
              if (window.showNotification) {
                window.showNotification(
                  `Person "${personName}" ${currentTranslations.personNotFound || "not found"}`,
                  "error"
                );
              }
            }
          }
        } catch (error) {
          console.error("Error handling graph click:", error);
          if (window.showNotification) {
            window.showNotification(
              currentTranslations.errorOpening ||
                "Error opening person details",
              "error"
            );
          }
        }
      }

      // Set up event listeners
      graphContainer.addEventListener("click", handleGraphClick);

      // Set up global update handler
      window.updateGraph = function () {
        console.log("GraphRenderer: Update graph requested");
        renderGraph();
      };

      // Expose renderGraph to global scope for external calls
      window.renderGraph = renderGraph;

      // Subscribe to state changes for automatic re-rendering via appState
      function initializeStateSubscription() {
        // ðŸŽ¯ Direct subscription - no need for polling!
        let lastTreeName = null;
        let lastPersonsCount = null;
        let lastDataHash = null; // Add hash for content changes

        // Helper function to create a simple hash of the persons data
        function getDataHash(persons) {
          if (!persons || persons.length === 0) return "";
          // Create a hash based on all person data (name, mother, father, info)
          return JSON.stringify(
            persons
              .map((p) => ({
                name: p.name,
                mother: p.mother,
                father: p.father,
                info: p.info,
              }))
              .sort((a, b) => a.name.localeCompare(b.name))
          );
        }

        const unsubscribe = appState.subscribe((state) => {
          // Check for tree, count, and content changes
          const currentTreeName = state.currentTreeName;
          const currentPersonsCount = state.genealogyData?.persons?.length || 0;
          const currentDataHash = getDataHash(
            state.genealogyData?.persons || []
          );

          if (
            currentTreeName !== lastTreeName ||
            currentPersonsCount !== lastPersonsCount ||
            currentDataHash !== lastDataHash
          ) {
            console.log(
              `GraphRenderer: State changed - tree: ${lastTreeName} â†’ ${currentTreeName}, persons: ${lastPersonsCount} â†’ ${currentPersonsCount}`
            );

            // Log data changes for debugging
            if (
              currentDataHash !== lastDataHash &&
              currentPersonsCount === lastPersonsCount
            ) {
              console.log(
                "GraphRenderer: Person data content changed (same count)"
              );
            }

            lastTreeName = currentTreeName;
            lastPersonsCount = currentPersonsCount;
            lastDataHash = currentDataHash;
            renderGraph();
          }
        });

        console.log("GraphRenderer subscribed to state changes");

        // Store unsubscribe function for cleanup
        window.addEventListener("beforeunload", function () {
          unsubscribe();
        });
      }

      // Initialize state subscription
      initializeStateSubscription();

      // Initial render when system is ready
      renderGraph();
    }

    // Setup graph functionality directly - no longer wait for event
    setupGraphFunctionality();

    return {
      updateTranslations: updateGraphRendererTranslations,
    };
  }

  // Initialize immediately since DOM is already ready in inline scripts
  initializeGraphRenderer();
</script>
