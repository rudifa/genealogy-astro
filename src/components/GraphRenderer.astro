---
// This component is now self-sufficient and does not require any props.
// It connects directly to the App singleton for its data.
---

<div class='genealogy-graph'>
  <!-- This container will be populated by the client-side script -->
  <div id='graph-placeholder' class='graph-placeholder'>
    <p>Loading graph...</p> <!-- Default text, updated by script -->
  </div>
</div>

<style>
  .genealogy-graph {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    position: relative;
    overflow: auto;
    background-color: #fafafa;
  }

  .graph-placeholder {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
    min-height: 300px;
  }

  .graph-placeholder p {
    text-align: center;
    color: #6c757d;
    font-style: italic;
  }
</style>

<script is:inline type='module'>
  // 1. Imports and variable declarations

  import {App} from "/utility/App.js";
  import {Graphviz} from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@2.13.0/dist/index.js";

  const verbose = false;
  const app = App.ensureAppExists();
  const graphvizPromise = Graphviz.load();
  const graphContainer = document.querySelector(".genealogy-graph");
  const graphPlaceholder = document.getElementById("graph-placeholder");

  let currentTranslations = null;

  // 2. Main execution flow

  if (!graphContainer || !graphPlaceholder) {
    console.error("GraphRenderer: DOM elements not found in component");
    throw new Error("GraphRenderer: DOM elements not found in component");
  }

  if (verbose)
    console.log("GraphRenderer: DOM elements found, setting up functionality");

  // Subscribe to language changes via appLanguages
  app.translations.subscribe((newTranslations) => {
    updateGraphRendererTranslations(newTranslations);
    console.log("ðŸ‘Ž GraphRenderer: newTranslations:", newTranslations);
  }, "GraphRenderer");

  // Setup graph functionality directly
  setupGraphFunctionality();

  // 3. Function definitions

  function updateGraphRendererTranslations(newTranslations) {
    currentTranslations = newTranslations;
    const graphPlaceholder = document.querySelector("#graph-placeholder p");
    if (graphPlaceholder)
      graphPlaceholder.textContent = currentTranslations.loadingGraph;
  }

  function setupGraphFunctionality() {
    if (verbose) console.log("GraphRenderer: Setting up graph functionality");

    graphContainer.addEventListener("click", handleGraphClick);

    initializeStateSubscription();

    renderGraph();
    afterGraphRender();
  }

  async function dotStringToSvg(data, treeName) {
    const dotString = data.genealogyDotString(treeName);
    try {
      const graphviz = await graphvizPromise;
      return graphviz.layout(dotString, "svg", "dot");
    } catch (error) {
      console.error("GraphRenderer: Error rendering DOT to SVG:", error);
      throw new Error(`Failed to render graph: ${error.message}`);
    }
  }

  async function renderGraph() {
    if (verbose) console.log("GraphRenderer: renderGraph called");

    // Get genealogy data from centralized state
    let genealogyData = null;
    let treeName = "Genealogy Tree";
    if (app.data) {
      const state = app.data.getState();
      genealogyData = state.genealogyData;
      if (state && state.currentTreeName) {
        treeName = state.currentTreeName;
      }
    } else {
      throw new Error("GraphRenderer: AppData state not available");
    }

    if (verbose) console.log("GraphRenderer: genealogyData:", genealogyData);
    if (verbose)
      console.log(
        "GraphRenderer: persons count:",
        genealogyData?.persons?.length
      );

    if (!graphContainer || !genealogyData || app.uiState.getState().isRendering) {
      if (verbose && app.uiState.getState().isRendering)
        console.log("GraphRenderer: Already rendering, skipping duplicate call");
      return;
    }

    try {
      app.uiState.setRendering(true);

      if (graphPlaceholder) {
        graphPlaceholder.style.display = "none";
      }

      if (verbose)
        console.log(
          "GraphRenderer: Converting DOT to SVG for data:",
          genealogyData
        );
      const newSvgString = await dotStringToSvg(genealogyData, treeName);
      if (verbose)
        console.log(
          "GraphRenderer: Received SVG string length:",
          newSvgString?.length
        );

      graphContainer.innerHTML = newSvgString;
      addPersonNodeHoverEffects();

      if (genealogyData.persons.length === 0) {
        app.uiState.showNotification(currentTranslations.graphCleared || "Graph cleared", "info");
      }
    } catch (error) {
      console.error("GraphRenderer: Error rendering graph:", error);
      if (graphPlaceholder) {
        graphPlaceholder.style.display = "block";
        const p = graphPlaceholder.querySelector("p");
        if (p) {
          p.textContent =
            currentTranslations.renderError ||
            "Error rendering graph. Please try again.";
          p.style.color = "#dc3545";
        }
      }
    } finally {
      app.uiState.setRendering(false);
    }
  }

  function handleGraphClick(event) {
    try {
      const targetLink = event.target.closest("a");

      if (!targetLink) {
        return;
      }

      const url =
        targetLink.getAttribute("xlink:href") ||
        targetLink.getAttribute("href");

      if (url && url.startsWith("person:")) {
        event.preventDefault();

        const personName = decodeURIComponent(url.substring("person:".length));

        if (verbose) console.log("GraphRenderer: Person clicked:", personName);

        let genealogyData = null;
        if (app.data) {
          const state = app.data.getState();
          genealogyData = state.genealogyData;
        } else {
          throw new Error("GraphRenderer: AppData state not available");
        }

        if (!genealogyData) {
          console.warn("GraphRenderer: No genealogy data available");
          return;
        }

        const personData = genealogyData.persons.find(
          (p) => p.name === personName
        );

        if (personData) {
          if (verbose)
            console.log(
              "GraphRenderer: Opening edit dialog for:",
              personName
            );
          app.uiState.openDialog("editPerson", personData);
        } else {
          app.uiState.showNotification(
            `Person "${personName}" ${currentTranslations.personNotFound || "not found"}`,
            "error"
          );
        }
      }
    } catch (error) {
      console.error("Error handling graph click:", error);
      app.uiState.showNotification(
        currentTranslations.errorOpening || "Error opening person details",
        "error"
      );
    }
  }

  function addPersonNodeHoverEffects() {
    const svg = graphContainer.querySelector("svg");
    if (!svg) return;
    svg.querySelectorAll("a").forEach((link) => {
      link.addEventListener("mouseover", () => {
        const polygon = link.querySelector("polygon");
        if (polygon) {
          polygon.setAttribute("stroke", "#007acc");
          polygon.setAttribute("stroke-width", "1.5");
          polygon.setAttribute("fill", "#e9f4ff");
        }
        link.querySelectorAll("text").forEach((text) => {
          text.setAttribute("fill", "#007acc");
          text.setAttribute("font-weight", "bold");
        });
      });
      link.addEventListener("mouseout", () => {
        const polygon = link.querySelector("polygon");
        if (polygon) {
          polygon.setAttribute("stroke", "black");
          polygon.setAttribute("stroke-width", "1");
          polygon.setAttribute("fill", "#e9f4ff");
        }
        link.querySelectorAll("text").forEach((text) => {
          text.setAttribute("fill", "black");
          text.setAttribute("font-weight", "normal");
        });
      });
    });
  }

  function afterGraphRender() {
    addPersonNodeHoverEffects();
  }

  function initializeStateSubscription() {
    let lastTreeName = null;
    let lastPersonsCount = null;
    let lastDataHash = null;

    function getDataHash(persons) {
      if (!persons || persons.length === 0) return "";
      return JSON.stringify(
        persons
          .map((p) => ({
            name: typeof p.name === "string" ? p.name : "???",
            mother: p.mother,
            father: p.father,
            info: p.info,
          }))
          .sort((a, b) => String(a.name).localeCompare(String(b.name)))
      );
    }

    const unsubscribe = app.data.subscribe((state) => {
      const currentTreeName = state.currentTreeName;
      const currentPersonsCount = state.genealogyData?.persons?.length || 0;
      const currentDataHash = getDataHash(state.genealogyData?.persons || []);

      if (
        currentTreeName !== lastTreeName ||
        currentPersonsCount !== lastPersonsCount ||
        currentDataHash !== lastDataHash
      ) {
        if (verbose) {
          console.log(
            `GraphRenderer: State changed - tree: ${lastTreeName} â†’ ${currentTreeName}, persons: ${lastPersonsCount} â†’ ${currentPersonsCount}`
          );
          if (
            currentDataHash !== lastDataHash &&
            currentPersonsCount === lastPersonsCount
          ) {
            console.log(
              "GraphRenderer: Person data content changed (same count)"
            );
          }
        }

        lastTreeName = currentTreeName;
        lastPersonsCount = currentPersonsCount;
        lastDataHash = currentDataHash;
        renderGraph();
      }
    });

    if (verbose) console.log("GraphRenderer subscribed to state changes");

    window.addEventListener("beforeunload", function () {
      unsubscribe();
    });
  }
</script>
