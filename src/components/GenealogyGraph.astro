---
import type {GenealogyData as GenealogyDataType} from "@/types";
import EditPersonDialog from "./EditPersonDialog.astro";

interface Props {
  data: GenealogyDataType;
}

const {data} = Astro.props;
---

<div class='screen'>
  <div class='toolbar'>
    <button id='add-button' type='button'>Add</button>
    <button id='clear-button' type='button'>Clear</button>
  </div>
  <div class='genealogy-graph'>
    <!-- This container will be populated by the client-side script -->
  </div>
</div>

<EditPersonDialog />

<style>
  .screen {
    display: flex;
    width: 100%;
    height: 100vh;
    position: relative;
  }

  .toolbar {
    width: 100px;
    background-color: #f5f5f5;
    border-right: 1px solid #ddd;
    padding: 20px 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .toolbar button {
    padding: 10px 15px;
    border: 1px solid #ccc;
    background-color: #fff;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }

  .toolbar button:hover {
    background-color: #e9e9e9;
  }

  .genealogy-graph {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
  }
</style>

<script type='module' define:vars={{genealogyDataJson: JSON.stringify(data)}}>
  import {GenealogyData} from "/GenealogyData.js";
  import {Graphviz} from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@2.13.0/dist/index.js";

  const genealogyData = new GenealogyData(JSON.parse(genealogyDataJson));
  const graphvizPromise = Graphviz.load();

  async function genealogySvgString(data) {
    const dotString = data.genealogyDotString();

    try {
      const graphviz = await graphvizPromise;
      return graphviz.layout(dotString, "svg", "dot");
    } catch (error) {
      console.error("Error rendering graph:", error);
      return `<p>Error rendering graph: ${error.message}</p>`;
    }
  }

  async function initializeGraph() {
    // --- Get references to toolbar buttons ---
    const addButton = document.getElementById("add-button");
    const clearButton = document.getElementById("clear-button");

    // --- Graph click handler ---
    const graphContainer = document.querySelector(".genealogy-graph");

    // --- Initialize the edit dialog ---
    const {openEditDialog} = window.initializeEditDialog(genealogyData);

    // --- Function to render the graph ---
    async function renderGraph() {
      if (graphContainer) {
        const newSvgString = await genealogySvgString(genealogyData);
        graphContainer.innerHTML = newSvgString;
      }
    }

    // --- Listen for data changes from the dialog ---
    document.addEventListener("genealogy-data-changed", async (event) => {
      await renderGraph();
    });

    // --- Render the graph on page load ---
    await renderGraph();

    if (graphContainer) {
      // --- Add click event listener to the graph container ---
      // to open the edit dialog for the clicked person node
      graphContainer.addEventListener("click", (event) => {
        const targetLink = event.target.closest("a");

        if (!targetLink) {
          return;
        }

        const url =
          targetLink.getAttribute("xlink:href") ||
          targetLink.getAttribute("href");

        if (url && url.startsWith("person:")) {
          event.preventDefault();

          const personName = decodeURIComponent(
            url.substring("person:".length)
          );

          const personData = genealogyData.persons.find(
            (p) => p.name === personName
          );
          if (personData) {
            openEditDialog(personData);
          }
        }
      });
    }

    // --- Toolbar button event listeners ---
    addButton.addEventListener("click", () => {
      const newPerson = {
        name: "",
        mother: null,
        father: null,
      };
      openEditDialog(newPerson);
    });

    clearButton.addEventListener("click", async () => {
      if (confirm("Are you sure you want to clear all genealogy data?")) {
        genealogyData.clear();
        await renderGraph();
      }
    });
  }

  // Initialize the graph when the DOM is ready
  document.addEventListener("DOMContentLoaded", initializeGraph);
</script>
