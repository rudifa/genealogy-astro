---
import type {TreeDataType} from "@/types";
import type {Language, Translations} from "../i18n/index";
import EditPersonDialog from "./EditPersonDialog.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import TreeSwitcher from "./TreeSwitcher.astro";
import TreeManagerDialog from "./TreeManagerDialog.astro";

interface Props {
  data: TreeDataType;
  language: Language;
  translations: Translations;
}

const {data, language, translations} = Astro.props;
---

<div class='screen'>
  <div class='toolbar'>
    <LanguageSwitcher currentLanguage={language} translations={translations} />
    <TreeSwitcher
      currentTree='Family Example'
      language={language}
      translations={translations}
    />
    <button id='add-button' type='button'>{translations.addPerson}</button>
    <button id='clear-button' type='button'>{translations.clearAll}</button>
    <button id='reset-button' type='button'>{translations.familyExample}</button
    >
    <button id='manage-trees-button' type='button'
      >{translations.manageTrees}</button
    >
    <div
      id='loading-indicator'
      class='loading-indicator'
      style='display: none;'>
      <div class='spinner'></div>
      <span>{translations.loading}</span>
    </div>
  </div>
  <div class='genealogy-graph'>
    <!-- This container will be populated by the client-side script -->
    <div id='graph-placeholder' class='graph-placeholder'>
      <p>{translations.loadingGraph}</p>
    </div>
  </div>
  <div id='notification' class='notification' style='display: none;'></div>
</div>

<EditPersonDialog language={language} translations={translations} />
<TreeManagerDialog language={language} translations={translations} />

<style>
  .screen {
    display: flex;
    width: 100%;
    flex: 1;
    position: relative;
    overflow: hidden;
  }

  .toolbar {
    width: 180px;
    background-color: #f8f9fa;
    border-right: 1px solid #dee2e6;
    padding: 20px 15px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);
  }

  .toolbar button {
    padding: 12px 16px;
    border: 2px solid #dee2e6;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    color: #495057;
    min-width: 150px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .toolbar button:hover {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-color: #adb5bd;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:focus {
    outline: none;
    border-color: #007acc;
    box-shadow:
      0 0 0 3px rgba(0, 122, 204, 0.15),
      0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .toolbar button:disabled {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    color: #6c757d;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    border-color: #dee2e6;
  }

  #add-button {
    background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
    color: white;
    border-color: #007acc;
  }

  #add-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #005c99 0%, #004080 100%);
    border-color: #005c99;
  }

  #clear-button {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    color: white;
    border-color: #dc3545;
  }

  #clear-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #c82333 0%, #bd2130 100%);
    border-color: #bd2130;
  }

  #reset-button {
    background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
    color: white;
    border-color: #6c757d;
  }

  #reset-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #5a6268 0%, #545b62 100%);
    border-color: #545b62;
  }

  #manage-trees-button {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    border-color: #28a745;
    font-weight: 600;
    position: relative;
  }

  #manage-trees-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #218838 0%, #1c7430 100%);
    border-color: #1e7e34;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(40, 167, 69, 0.3);
  }

  #manage-trees-button:before {
    content: "";
    margin-right: 0px;
    font-size: 16px;
  }

  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    padding: 10px;
    font-size: 12px;
    color: #6c757d;
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #007acc;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .genealogy-graph {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    position: relative;
    overflow: auto;
    background-color: #fafafa;
  }

  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    background-color: white;
  }

  .graph-placeholder {
    text-align: center;
    color: #6c757d;
    font-style: italic;
  }

  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: 6px;
    font-weight: 500;
    z-index: 1000;
    max-width: 300px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
  }

  .notification.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .notification.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .notification.info {
    background-color: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .toolbar {
      width: 160px;
      padding: 15px 12px;
      gap: 10px;
    }

    .toolbar button {
      min-width: 130px;
      font-size: 13px;
      padding: 10px 14px;
    }
  }

  @media (max-width: 480px) {
    .toolbar {
      width: 140px;
      padding: 12px 8px;
      gap: 8px;
    }

    .toolbar button {
      min-width: 120px;
      font-size: 12px;
      padding: 8px 12px;
    }

    .loading-indicator {
      font-size: 11px;
    }
  }
</style>

<script
  is:inline
  type='module'
  define:vars={{genealogyDataJson: JSON.stringify(data)}}
>
  import {GenealogyData} from "/utility/GenealogyData.js";
  import {StorageManager} from "/utility/StorageManager.js";
  import {Graphviz} from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@2.13.0/dist/index.js";

  // genealogyDataJson is provided by Astro's define:vars

  // Initialize genealogy data with multi-tree localStorage persistence
  const STORAGE_KEY = "genealogy-app-data";
  const EXAMPLE_TREE_NAME = "Family Example";

  let genealogyData;
  let currentTreeName = EXAMPLE_TREE_NAME;
  let storageManager;

  function initialGenealogyData() {
    // @ts-ignore - genealogyDataJson is provided by Astro's define:vars
    return JSON.parse(genealogyDataJson);
  }

  // Initialize storage manager
  storageManager = new StorageManager(
    STORAGE_KEY,
    EXAMPLE_TREE_NAME,
    initialGenealogyData()
  );

  function loadDataFromStorage() {
    try {
      currentTreeName = storageManager.getCurrentTreeName();
      const activeTreeData = storageManager.getActiveTreeData();

      console.log(
        `Loaded data from localStorage for tree: ${currentTreeName}`,
        activeTreeData
      );
      return new GenealogyData(activeTreeData);
    } catch (error) {
      console.warn("Failed to load data from localStorage:", error);

      // Fallback to initial data
      console.log("Using initial data from server");
      currentTreeName = EXAMPLE_TREE_NAME;
      return new GenealogyData(initialGenealogyData());
    }
  }

  function saveDataToStorage() {
    try {
      const treeData = {
        persons: genealogyData.persons,
      };
      storageManager.saveTreeData(currentTreeName, treeData, true);
    } catch (error) {
      console.error("Failed to save data to localStorage:", error);
    }
  }

  function switchToTree(treeName) {
    try {
      // Save current tree data first
      saveDataToStorage();

      // Use StorageManager to switch
      const success = storageManager.switchToTree(treeName);
      if (success) {
        currentTreeName = treeName;
        const newTreeData = storageManager.getTreeData(treeName);
        genealogyData = new GenealogyData(newTreeData);

        console.log(`Switched to tree: ${treeName}`);
        console.log("New genealogy data:", genealogyData);
        console.log("Persons in new tree:", genealogyData.persons);
        return true;
      }
      return false;
    } catch (error) {
      console.error("Failed to switch tree:", error);
      return false;
    }
  }

  function createNewTree(treeName, copyFromCurrent = false) {
    try {
      const sourceTreeData = copyFromCurrent
        ? {persons: genealogyData.persons}
        : null;
      return storageManager.createNewTree(
        treeName,
        sourceTreeData,
        currentTranslations
      );
    } catch (error) {
      console.error("Failed to create new tree:", error);
      throw error;
    }
  }

  function deleteTree(treeName) {
    try {
      const success = storageManager.deleteTree(treeName, currentTranslations);

      // If we deleted the active tree, update our local variables
      if (treeName === currentTreeName && success) {
        currentTreeName = storageManager.getCurrentTreeName();
        const newTreeData = storageManager.getActiveTreeData();
        genealogyData = new GenealogyData(newTreeData);
      }

      return success;
    } catch (error) {
      console.error("Failed to delete tree:", error);
      throw error;
    }
  }

  function getAvailableTrees() {
    return storageManager.getAvailableTrees();
  }

  function resetToOriginalData() {
    try {
      storageManager.resetToDefault();
      currentTreeName = EXAMPLE_TREE_NAME;
      genealogyData = new GenealogyData(initialGenealogyData());
      console.log("Reset to original data");
    } catch (error) {
      console.error("Failed to reset to original data:", error);
    }
  }

  // Make functions available globally for debugging/console access and tree management
  window.genealogyDebug = {
    saveToStorage: saveDataToStorage,
    resetToOriginal: resetToOriginalData,
    clearStorage: () => storageManager.clearStorage(),
    getData: () => genealogyData,
    getCurrentTreeName: () => currentTreeName,
    getStoredData: () => storageManager.getStorageData(),
    getAvailableTrees: getAvailableTrees,
    switchToTree: switchToTree,
    createNewTree: createNewTree,
    deleteTree: deleteTree,
    storageManager: storageManager, // Expose StorageManager for advanced debugging
    getStorageStats: () => storageManager.getStorageStats(),
  };

  // Make tree management functions available globally for the future families dialog
  window.genealogyTreeManager = {
    getCurrentTreeName: () => currentTreeName,
    getAvailableTrees: getAvailableTrees,
    switchToTree: async (treeName) => {
      const success = switchToTree(treeName);
      if (success) {
        // Update tree name display immediately
        updateTreeNameDisplay();
        // Update the edit dialog with new genealogy data
        if (window.updateEditDialogData) {
          window.updateEditDialogData(genealogyData);
        }
        // Trigger graph re-render
        const event = new CustomEvent("genealogy-tree-changed", {
          detail: {treeName: currentTreeName},
        });
        document.dispatchEvent(event);
      }
      return success;
    },
    createNewTree: createNewTree,
    deleteTree: async (treeName) => {
      const success = deleteTree(treeName);
      if (success) {
        // Update tree name display if we deleted the active tree
        updateTreeNameDisplay();
        if (treeName === currentTreeName) {
          // Trigger graph re-render if we deleted the active tree
          const event = new CustomEvent("genealogy-tree-changed", {
            detail: {treeName: currentTreeName},
          });
          document.dispatchEvent(event);
        }
      }
      return success;
    },
    renameTree: async (oldName, newName) => {
      try {
        const success = storageManager.renameTree(
          oldName,
          newName,
          currentTranslations
        );

        // Update local variables if we renamed the active tree
        if (oldName === currentTreeName && success) {
          currentTreeName = newName;
        }

        return success;
      } catch (error) {
        console.error("Failed to rename tree:", error);
        throw error;
      }
    },
  };

  genealogyData = loadDataFromStorage();
  const graphvizPromise = Graphviz.load();

  // UI state management
  let isRendering = false;
  let currentTranslations = window.genealogyTranslations?.en || {
    addPerson: "Add Person",
    clearAll: "Clear All",
    loading: "Loading...",
    loadingGraph: "Loading graph...",
    graphUpdated: "Graph updated",
    graphCleared: "Graph cleared",
    noDataToClear: "No data to clear",
    errorUpdating: "Failed to update graph",
    errorRendering: "Failed to render graph",
    errorOpening: "Error opening person details",
    errorClearing: "Error clearing genealogy data",
    errorInitializing: "Failed to initialize genealogy graph",
    personNotFound: "not found",
    confirmClear:
      "Are you sure you want to remove all {count} {people} from the genealogy? This action cannot be undone.",
    confirmResetFamilyExample:
      "Are you sure you want to reset the Family Example tree to its original state? This will replace all current data.",
    confirmLoadFamilyExample:
      'Are you sure you want to load the family example data into the "{treeName}" tree? This will replace all current data.',
    treeNameEmpty: "Tree name cannot be empty",
    treeNameExists: "A tree with this name already exists",
    treeNotFound: "Tree not found",
    cannotDeleteFamilyExample: "Cannot delete the Family Example tree",
    cannotRenameFamilyExample: "Cannot rename the Family Example tree",
    initializationError: "Initialization Error",
    failedToLoad: "Failed to load the genealogy graph application.",
    errorRenderingGraph: "Error Rendering Graph",
    reloadPage: "Reload Page",
    person: "person",
    people: "people",
    switchedToTree: "Switched to tree: {treeName}",
    errorUpdateAfterTreeChange: "Failed to update graph after tree change",
    errorLoadingFamilyExample: "Error loading family example",
    errorOpeningTreeManagement: "Error opening tree management",
  };

  // Translation management
  function updateUITranslations(translations) {
    currentTranslations = translations;

    // Update button text
    const addButton = document.getElementById("add-button");
    const clearButton = document.getElementById("clear-button");
    const resetButton = document.getElementById("reset-button");
    const manageTreesButton = document.getElementById("manage-trees-button");
    const loadingIndicator = document.querySelector("#loading-indicator span");
    const graphPlaceholder = document.querySelector("#graph-placeholder p");

    if (addButton) addButton.textContent = translations.addPerson;
    if (clearButton) clearButton.textContent = translations.clearAll;
    if (resetButton) resetButton.textContent = translations.familyExample;
    if (manageTreesButton)
      manageTreesButton.textContent = translations.manageTrees;
    if (loadingIndicator) loadingIndicator.textContent = translations.loading;
    if (graphPlaceholder)
      graphPlaceholder.textContent = translations.loadingGraph;
  }

  // Tree name display management - now handled by TreeSwitcher component
  function updateTreeNameDisplay() {
    // TreeSwitcher component handles its own display updates
    // This function is kept for backward compatibility
    console.log(`Current tree: ${currentTreeName}`);
  }

  async function genealogySvgString(data) {
    const dotString = data.genealogyDotString();

    try {
      const graphviz = await graphvizPromise;
      return graphviz.layout(dotString, "svg", "dot");
    } catch (error) {
      console.error("Error rendering graph:", error);
      throw new Error(`Failed to render graph: ${error.message}`);
    }
  }

  // Notification system
  function showNotification(message, type = "info", duration = 3000) {
    const notification = document.getElementById("notification");
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.style.display = "block";

    setTimeout(() => {
      notification.style.display = "none";
    }, duration);
  }

  // Loading state management
  function setLoadingState(loading) {
    const loadingIndicator = document.getElementById("loading-indicator");
    const addButton = document.getElementById("add-button");
    const clearButton = document.getElementById("clear-button");
    const resetButton = document.getElementById("reset-button");

    if (loading) {
      loadingIndicator.style.display = "flex";
      addButton.disabled = true;
      clearButton.disabled = true;
      resetButton.disabled = true;
      isRendering = true;
    } else {
      loadingIndicator.style.display = "none";
      addButton.disabled = false;
      clearButton.disabled = false;
      resetButton.disabled = false;
      isRendering = false;
    }
  }

  async function initializeGraph() {
    // --- Get references to UI elements ---
    const addButton = document.getElementById("add-button");
    const clearButton = document.getElementById("clear-button");
    const resetButton = document.getElementById("reset-button");
    const graphContainer = document.querySelector(".genealogy-graph");
    const graphPlaceholder = document.getElementById("graph-placeholder");

    try {
      // --- Initialize the edit dialog ---
      const {openEditDialog, updateGenealogyData} =
        window.initializeEditDialog(genealogyData);

      // Make the openEditDialog function available globally for tree switches
      window.currentOpenEditDialog = openEditDialog;

      // Make the update function available globally for tree switches
      window.updateEditDialogData = updateGenealogyData;

      // --- Function to render the graph ---
      async function renderGraph() {
        if (!graphContainer || isRendering) return;

        try {
          setLoadingState(true);

          // Hide placeholder if it exists
          if (graphPlaceholder) {
            graphPlaceholder.style.display = "none";
          }

          const newSvgString = await genealogySvgString(genealogyData);
          graphContainer.innerHTML = newSvgString;

          // Show success notification for significant changes
          if (genealogyData.persons.length === 0) {
            showNotification(
              currentTranslations.graphCleared || "Graph cleared",
              "info"
            );
          }
        } catch (error) {
          console.error("Error rendering graph:", error);
          graphContainer.innerHTML = `
            <div style="text-align: center; color: #dc3545; padding: 20px;">
              <h3>${currentTranslations.errorRenderingGraph || "Error Rendering Graph"}</h3>
              <p>${error.message}</p>
              <button onclick="location.reload()" style="padding: 8px 16px; margin-top: 10px; border: 1px solid #dc3545; background: white; color: #dc3545; border-radius: 4px; cursor: pointer;">
                ${currentTranslations.reloadPage || "Reload Page"}
              </button>
            </div>
          `;
          showNotification(
            currentTranslations.errorRendering || "Failed to render graph",
            "error"
          );
        } finally {
          setLoadingState(false);
        }
      }

      // --- Listen for data changes from the dialog ---
      document.addEventListener("genealogy-data-changed", async (event) => {
        try {
          // Save to localStorage whenever data changes
          saveDataToStorage();
          await renderGraph();
          showNotification(
            currentTranslations.graphUpdated || "Graph updated",
            "success"
          );
          console.log(
            "genealogy-data-changed event, updated persons:",
            genealogyData.persons
          );
        } catch (error) {
          console.error("Error updating graph:", error);
          showNotification(
            currentTranslations.errorUpdating || "Failed to update graph",
            "error"
          );
        }
      });

      // --- Listen for tree changes ---
      document.addEventListener("genealogy-tree-changed", async (event) => {
        try {
          await renderGraph();
          updateTreeNameDisplay();
          const treeName = event.detail?.treeName || currentTreeName;
          showNotification(
            currentTranslations.switchedToTree?.replace(
              "{treeName}",
              treeName
            ) || `Switched to tree: ${treeName}`,
            "success"
          );
          console.log(
            "genealogy-tree-changed event, switched to tree:",
            treeName
          );
        } catch (error) {
          console.error("Error rendering graph after tree change:", error);
          showNotification(
            currentTranslations.errorUpdateAfterTreeChange ||
              "Failed to update graph after tree change",
            "error"
          );
        }
      });

      // --- Render the graph on page load ---
      await renderGraph();

      // --- Update the tree name display ---
      updateTreeNameDisplay();

      if (graphContainer) {
        // --- Add click event listener to the graph container ---
        graphContainer.addEventListener("click", (event) => {
          try {
            const targetLink = event.target.closest("a");

            if (!targetLink) {
              return;
            }

            const url =
              targetLink.getAttribute("xlink:href") ||
              targetLink.getAttribute("href");

            if (url && url.startsWith("person:")) {
              event.preventDefault();

              const personName = decodeURIComponent(
                url.substring("person:".length)
              );

              const personData = genealogyData.persons.find(
                (p) => p.name === personName
              );

              if (personData) {
                // Use the current openEditDialog function
                const openFn = window.currentOpenEditDialog || openEditDialog;
                openFn(personData);
              } else {
                showNotification(
                  `Person "${personName}" ${currentTranslations.personNotFound || "not found"}`,
                  "error"
                );
              }
            }
          } catch (error) {
            console.error("Error handling graph click:", error);
            showNotification(
              currentTranslations.errorOpening ||
                "Error opening person details",
              "error"
            );
          }
        });
      }

      // --- Toolbar button event listeners ---
      addButton.addEventListener("click", () => {
        try {
          if (isRendering) return;

          const newPerson = {
            name: "",
            mother: null,
            father: null,
          };
          // Use the current openEditDialog function
          const openFn = window.currentOpenEditDialog || openEditDialog;
          openFn(newPerson);
        } catch (error) {
          console.error("Error opening add dialog:", error);
          showNotification(
            currentTranslations.errorOpening ||
              "Error opening add person dialog",
            "error"
          );
        }
      });

      clearButton.addEventListener("click", async () => {
        try {
          if (isRendering) return;

          const personCount = genealogyData.persons.length;
          if (personCount === 0) {
            showNotification(
              currentTranslations.noDataToClear || "No data to clear",
              "info"
            );
            return;
          }

          // Get the most current translations to avoid stale state
          const latestLang = window.currentLanguage || "en";
          const latestTranslations =
            window.genealogyTranslations?.[latestLang] ||
            window.genealogyTranslations?.en ||
            currentTranslations;

          const confirmMessage = latestTranslations.confirmClear
            ? latestTranslations.confirmClear
                .replace("{count}", personCount)
                .replace(
                  "{people}",
                  personCount === 1
                    ? latestTranslations.person
                    : latestTranslations.people
                )
            : `Are you sure you want to remove all ${personCount} ${personCount === 1 ? "person" : "people"} from the genealogy? This action cannot be undone.`;

          if (confirm(confirmMessage)) {
            genealogyData.clear();
            // Save to localStorage after clearing
            saveDataToStorage();
            await renderGraph();
          }
        } catch (error) {
          console.error("Error clearing data:", error);
          showNotification(
            currentTranslations.errorClearingData ||
              "Error clearing genealogy data",
            "error"
          );
        }
      });

      resetButton.addEventListener("click", async () => {
        try {
          if (isRendering) return;

          const confirmMessage =
            currentTreeName === EXAMPLE_TREE_NAME
              ? currentTranslations.confirmResetFamilyExample ||
                "Are you sure you want to reset the Family Example tree to its original state? This will replace all current data."
              : (
                  currentTranslations.confirmLoadFamilyExample ||
                  'Are you sure you want to load the family example data into the "{treeName}" tree? This will replace all current data.'
                ).replace("{treeName}", currentTreeName);

          if (confirm(confirmMessage)) {
            // Always load the original family example data
            const originalData = initialGenealogyData();
            genealogyData = new GenealogyData(originalData);

            saveDataToStorage();
            await renderGraph();
            showNotification(
              currentTranslations.familyExampleLoaded ||
                "Family example loaded",
              "success"
            );
          }
        } catch (error) {
          console.error("Error loading family example:", error);
          showNotification(
            currentTranslations.errorLoadingFamilyExample ||
              "Error loading family example",
            "error"
          );
        }
      });

      // Add manage trees button functionality
      const manageTreesButton = document.getElementById("manage-trees-button");
      if (manageTreesButton) {
        manageTreesButton.addEventListener("click", () => {
          try {
            if (isRendering) return;

            // Open tree management dialog
            if (window.treeManagementDialog) {
              window.treeManagementDialog.show();
            } else {
              // Fallback for debugging
              const trees = getAvailableTrees();
              const message = `Current tree: "${currentTreeName}"\n\nAvailable trees:\n${trees
                .map((name) =>
                  name === currentTreeName ? `• ${name} (active)` : `• ${name}`
                )
                .join("\n")}\n\nTree management dialog is loading...`;

              alert(message);
            }
          } catch (error) {
            console.error("Error opening tree management:", error);
            showNotification(
              currentTranslations.errorOpeningTreeManagement ||
                "Error opening tree management",
              "error"
            );
          }
        });
      }

      // Add keyboard shortcuts
      document.addEventListener("keydown", (event) => {
        // Ctrl/Cmd + N for new person
        if (
          (event.ctrlKey || event.metaKey) &&
          event.key === "n" &&
          !isRendering
        ) {
          event.preventDefault();
          addButton.click();
        }
      });
    } catch (error) {
      console.error("Error initializing graph:", error);
      showNotification(
        currentTranslations.errorInitializing ||
          "Failed to initialize genealogy graph",
        "error"
      );

      // Show error in graph container
      if (graphContainer) {
        graphContainer.innerHTML = `
          <div style="text-align: center; color: #dc3545; padding: 20px;">
            <h3>${currentTranslations.initializationError || "Initialization Error"}</h3>
            <p>${currentTranslations.failedToLoad || "Failed to load the genealogy graph application."}</p>
            <button onclick="location.reload()" style="padding: 8px 16px; margin-top: 10px; border: 1px solid #dc3545; background: white; color: #dc3545; border-radius: 4px; cursor: pointer;">
              ${currentTranslations.reloadPage || "Reload Page"}
            </button>
          </div>
        `;
      }
    }
  }

  // Initialize the graph when the DOM is ready
  document.addEventListener("DOMContentLoaded", initializeGraph);

  // Listen for language changes
  window.addEventListener("languageChanged", function (event) {
    const translations = event.detail.translations;
    if (translations) {
      updateUITranslations(translations);
    }
  });

  // Listen for tree management updates to ensure display is synchronized
  document.addEventListener("tree-manager-update", function (event) {
    const {action, treeName} = event.detail;
    console.log(`Tree management update: ${action} for tree ${treeName}`);

    // Force update of tree name display
    updateTreeNameDisplay();

    // If a tree was deleted or switched, ensure edit dialog has current data
    if (window.updateEditDialogData) {
      window.updateEditDialogData(genealogyData);
    }
  });
</script>
