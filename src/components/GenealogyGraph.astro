---
function genealogyDotString(data) {
  const dotLines = ["strict digraph G {", "  node [shape=box];"];

  for (const person of data.persons) {
    // Add the main person node with a clickable URL
    dotLines.push(
      `  "${person.name}" [label="${person.name}", URL="#person:${encodeURIComponent(person.name)}", style=filled, fillcolor=white];`
    );

    // Add nodes for parents if they exist
    if (person.mother) {
      dotLines.push(`  "${person.mother}" [label="${person.mother}"];`);
    }
    if (person.father) {
      dotLines.push(`  "${person.father}" [label="${person.father}"];`);
    }

    // If both parents exist, create a union node and connect them
    if (person.mother && person.father) {
      const parentsNode = `"${person.mother} + ${person.father}"`;
      dotLines.push(
        `  ${parentsNode} [shape=point, label=""];`,
        `  "${person.mother}" -> ${parentsNode} [dir=none];`,
        `  "${person.father}" -> ${parentsNode} [dir=none];`,
        `  ${parentsNode} -> "${person.name}";`
      );
    }
  }

  dotLines.push("}");
  return dotLines.join("\n");
}

import {Graphviz} from "@hpcc-js/wasm/graphviz";
import type {GenealogyData} from "@/types";

interface Props {
  data: GenealogyData;
}

const {data} = Astro.props;

let dotString = genealogyDotString(data);

let svg = "";
try {
  const graphviz = await Graphviz.load();
  svg = graphviz.dot(dotString);
  console.log("Graphviz SVG:", svg);
} catch (error) {
  console.error("Error rendering graph:", error);
  svg = `<p>Error rendering graph: ${error.message}</p>`;
}
---

<div class='genealogy-graph' set:html={svg} />

<style>
  .genealogy-graph {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }
  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
  }
</style>

<script is:inline>
  const graphContainer = document.querySelector(".genealogy-graph");

  if (graphContainer) {
    graphContainer.addEventListener("click", (event) => {
      // Find the nearest <a> tag ancestor of the clicked element.
      // Graphviz wraps clickable nodes in <a> tags.
      const targetLink = event.target.closest("a");

      if (!targetLink) {
        return;
      }

      // Check for our custom URL scheme. Graphviz uses `xlink:href` for SVGs.
      const url =
        targetLink.getAttribute("xlink:href") ||
        targetLink.getAttribute("href");

      if (url && url.startsWith("#person:")) {
        // Prevent the browser from trying to navigate to the fragment.
        event.preventDefault();

        // Extract the person's name from the URL.
        const personName = decodeURIComponent(url.substring("#person:".length));

        // You can now use the personName, for example, to display more info.
        console.log(`Person clicked: ${personName}`);
      }
    });
  }
</script>
