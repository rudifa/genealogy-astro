---
function genealogyDotString(data) {
  const dotLines = [
    "strict digraph G {",
    '  node [shape=box, style="filled,rounded", fillcolor="#E9F4FF"];',
  ];

  for (const person of data.persons) {
    // Add the main person node with a clickable URL
    dotLines.push(
      `  "${person.name}" [label="${person.name}", URL="#person:${encodeURIComponent(person.name)}"];`
    );

    // Add nodes for parents if they exist
    if (person.mother) {
      dotLines.push(`  "${person.mother}" [label="${person.mother}"];`);
    }
    if (person.father) {
      dotLines.push(`  "${person.father}" [label="${person.father}"];`);
    }

    // If both parents exist, create a union node and connect them
    if (person.mother && person.father) {
      const parentsNode = `"${person.mother} + ${person.father}"`;
      dotLines.push(
        `  ${parentsNode} [shape=point, label=""];`,
        `  "${person.mother}" -> ${parentsNode} [dir=none];`,
        `  "${person.father}" -> ${parentsNode} [dir=none];`,
        `  ${parentsNode} -> "${person.name}";`
      );
    }
  }

  dotLines.push("}");
  return dotLines.join("\n");
}

import {Graphviz} from "@hpcc-js/wasm/graphviz";
import type {GenealogyData} from "@/types";

interface Props {
  data: GenealogyData;
}

const {data} = Astro.props;

let dotString = genealogyDotString(data);
// console.log("Generated DOT string:", dotString);

let svg = "";
try {
  const graphviz = await Graphviz.load();
  svg = graphviz.dot(dotString);
  //   console.log("Graphviz SVG:", svg);
} catch (error) {
  console.error("Error rendering graph:", error);
  svg = `<p>Error rendering graph: ${error.message}</p>`;
}
---

<div class='genealogy-graph' set:html={svg} />

<style>
  .genealogy-graph {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }
  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
  }
</style>

<script define:vars={{genealogyData: data}}>
  // This script is hoisted to the <head> and runs before the DOM is ready.
  // We must wait for the DOMContentLoaded event to ensure all elements are available.
  document.addEventListener("DOMContentLoaded", () => {
    // --- Get references to dialog elements ---
    const dialog = document.getElementById("edit-dialog");
    const form = document.getElementById("edit-form");
    const originalNameInput = document.getElementById("original-name");
    const nameInput = document.getElementById("person-name");
    const motherInput = document.getElementById("person-mother");
    const fatherInput = document.getElementById("person-father");
    const saveButton = document.getElementById("save-button");
    const cancelButton = document.getElementById("cancel-button");
    const deleteButton = document.getElementById("delete-button");

    // --- Graph click handler ---
    const graphContainer = document.querySelector(".genealogy-graph");

    if (graphContainer) {
      graphContainer.addEventListener("click", (event) => {
        // Find the nearest <a> tag ancestor of the clicked element.
        // Graphviz wraps clickable nodes in <a> tags.
        const targetLink = event.target.closest("a");

        if (!targetLink) {
          return;
        }

        // Check for our custom URL scheme. Graphviz uses `xlink:href` for SVGs.
        const url =
          targetLink.getAttribute("xlink:href") ||
          targetLink.getAttribute("href");

        if (url && url.startsWith("#person:")) {
          // Prevent the browser from trying to navigate to the fragment.
          event.preventDefault();

          // Extract the person's name from the URL.
          const personName = decodeURIComponent(
            url.substring("#person:".length)
          );

          // Find the person's data and open the dialog
          const personData = genealogyData.persons.find(
            (p) => p.name === personName
          );
          if (personData) {
            openEditDialog(personData);
          }
        }
      });
    }

    // --- Dialog functions ---
    function openEditDialog(person) {
      originalNameInput.value = person.name;
      nameInput.value = person.name;
      motherInput.value = person.mother || "";
      fatherInput.value = person.father || "";
      dialog.style.display = "flex";
    }

    function closeEditDialog() {
      dialog.style.display = "none";
    }

    // --- Dialog event listeners ---
    cancelButton.addEventListener("click", closeEditDialog);

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const updatedPerson = {
        originalName: originalNameInput.value,
        name: nameInput.value,
        mother: motherInput.value || null,
        father: fatherInput.value || null,
      };
      console.log("Saving person:", updatedPerson);
      // In a real app, you would send this data to a server and then refresh the page or graph.
      alert(
        `Saved data for ${updatedPerson.name}. Refresh the page to see changes (not implemented).`
      );
      closeEditDialog();
    });

    deleteButton.addEventListener("click", () => {
      const personName = originalNameInput.value;
      if (confirm(`Are you sure you want to delete ${personName}?`)) {
        console.log("Deleting person:", personName);
        // In a real app, you would send this to a server and then refresh the page or graph.
        alert(
          `${personName} deleted. Refresh the page to see changes (not implemented).`
        );
        closeEditDialog();
      }
    });
  });
</script>
