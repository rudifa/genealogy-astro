---
import {Graphviz} from "@hpcc-js/wasm/graphviz";

export interface Person {
  name: string;
  mother?: string;
  father?: string;
}

export interface GenealogyData {
  persons: Person[];
}

interface Props {
  data: GenealogyData;
}

const {data} = Astro.props;

let dotString = `strict digraph G {
  node [shape=box];
`;

// Add nodes and edges for parent-child relationships
for (const person of data.persons) {
  // Add nodes for the person, mother, and father
  dotString += `  "${person.name}" [label="${person.name}"];
`;
  if (person.mother) {
    dotString += `  "${person.mother}" [label="${person.mother}"];
`;
  }
  if (person.father) {
    dotString += `  "${person.father}" [label="${person.father}"];
`;
  }

  // Add parents node if both mother and father are present
  // Add edges for parent-child relationships
  if (person.mother && person.father) {
    const parentsNode = `"${person.mother} + ${person.father}"`;
    // Create a combined node for parents
    dotString += `  ${parentsNode} [shape=point, label=""];
`;
    dotString += `  "${person.mother}" -> ${parentsNode} [dir=none];
`;
    dotString += `  "${person.father}" -> ${parentsNode} [dir=none];
`;
    dotString += `  ${parentsNode} -> "${person.name}";
`;
  }
}

dotString += `}`;

let svg = "";
try {
  const graphviz = await Graphviz.load();
  svg = graphviz.dot(dotString);
} catch (error) {
  console.error("Error rendering graph:", error);
  svg = `<p>Error rendering graph: ${error.message}</p>`;
}
---

<div class='genealogy-graph' set:html={svg} />

<style>
  .genealogy-graph {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }
  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
  }
</style>
