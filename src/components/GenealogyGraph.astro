---
import type {Language, Translations} from "../i18n/index";
import EditPersonDialog from "./EditPersonDialog.astro";
import FileManagerDialog from "./FileManagerDialog.astro";
import GraphRenderer from "./GraphRenderer.astro";
import Notification from "./Notification.astro";
import Toolbar from "./Toolbar.astro";
import TreeManagerDialog from "./TreeManagerDialog.astro";

interface Props {
  language: Language;
  translations: Translations;
}

const {language, translations} = Astro.props;
---

<div class='screen' data-cy='genealogy-graph'>
  <Toolbar language={language} translations={translations} />
  <GraphRenderer language={language} translations={translations} />
  <Notification language={language} translations={translations} />
</div>

<EditPersonDialog language={language} translations={translations} />
<FileManagerDialog language={language} translations={translations} />
<TreeManagerDialog language={language} translations={translations} />

<style>
  .screen {
    display: flex;
    width: 100%;
    flex: 1;
    position: relative;
    overflow: visible;
  }
</style>

<script is:inline type='module'>
  // --- 1. Imports and variable declarations ---
  import {AppLanguages} from "/utility/AppLanguages.js";
  import {AppData} from "/utility/AppData.js";

  // Use the AppLanguages singleton for all translations management
  const appLanguages = AppLanguages.ensureOneExists();
  // Use the AppData singleton for all tree data management
  const appData = AppData.ensureOneExists();

  let currentTranslations;

  // --- 2. Main execution flow ---

  // Subscribe to language changes via appLanguages
  appLanguages.subscribe((newTranslations) => {
    updateGenealogyGraphTranslations(newTranslations);
    console.log("👍 GenealogyGraph: newTranslations:", newTranslations);
  }, "GenealogyGraph");

  console.log("GenealogyGraph: script loading...");

  // Initialize genealogy system immediately since DOM is already ready in inline scripts
  initializeGenealogySystem();

  // Initialize state subscription
  initializeStateSubscription();

  // --- 3. Function definitions ---

  // Translation management
  function updateGenealogyGraphTranslations(newTranslations) {
    currentTranslations = newTranslations;
    // Individual components will handle their own translation updates
  }

  // Loading state management
  function setLoadingState(loading) {
    // Also notify toolbar if available
    if (window.toolbarSetLoadingState) {
      window.toolbarSetLoadingState(loading);
    }
  }

  async function initializeGenealogySystem() {
    console.log("GenealogyGraph: initializeGenealogySystem...");
    try {
      // --- Initialize the edit dialog ---
      const state = appData.getState();
      state; // disposes of a ts hint

      // Initialize the shared variables

      window.genealogyIsRendering = false;
      window.setLoadingState = setLoadingState;

      console.log("Genealogy system initialized successfully");

      // No longer need to dispatch ready event - components use direct state access
    } catch (error) {
      console.error("Error initializing genealogy system:", error);
      if (window.showNotification) {
        window.showNotification(
          currentTranslations.errorInitializing ||
            "Failed to initialize genealogy system",
          "error"
        );
      }
    }
  }

  // Listen for tree management updates to ensure display is synchronized
  function initializeStateSubscription() {
    // Always subscribe to appData singleton
    const unsubscribe = appData.subscribe((state) => {
      // Sync forest data if present (no longer assign to window.genealogyTreeManager)
      // All tree management is handled via appData singleton now.
      state; // disposes of a ts hint
    });

    console.log("GenealogyGraph subscribed to state changes");

    // Store unsubscribe function for cleanup
    window.addEventListener("beforeunload", function () {
      unsubscribe();
    });
  }
</script>
