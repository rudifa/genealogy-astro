---
import type {GenealogyData as GenealogyDataType} from "@/types";

interface Props {
  data: GenealogyDataType;
}

const {data} = Astro.props;
---

<div class='screen'>
  <div class='toolbar'>
    <button id='add-button' type='button'>Add</button>
    <button id='clear-button' type='button'>Clear</button>
  </div>
  <div class='genealogy-graph'>
    <!-- This container will be populated by the client-side script -->
  </div>
</div>

<style>
  .screen {
    display: flex;
    width: 100%;
    height: 100vh;
    position: relative;
  }

  .toolbar {
    width: 100px;
    background-color: #f5f5f5;
    border-right: 1px solid #ddd;
    padding: 20px 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .toolbar button {
    padding: 10px 15px;
    border: 1px solid #ccc;
    background-color: #fff;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }

  .toolbar button:hover {
    background-color: #e9e9e9;
  }

  .genealogy-graph {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .genealogy-graph svg {
    max-width: 100%;
    height: auto;
  }
</style>

<script type='module' define:vars={{genealogyDataJson: JSON.stringify(data)}}>
  import {GenealogyData} from "/GenealogyData.js";
  import {Graphviz} from "https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@2.13.0/dist/index.js";

  const genealogyData = new GenealogyData(JSON.parse(genealogyDataJson));
  const graphvizPromise = Graphviz.load();

  function genealogyDotString(data) {
    const dotLines = [
      "strict digraph G {",
      '  node [shape=box, style="filled", fillcolor="#E9F4FF"];',
      "  edge [dir=none];",
    ];

    // 1. Collect all unique names from the dataset to define nodes.
    const allNames = data.getAllUniqueNames();

    // 2. Define all person nodes.
    allNames.forEach((name) => {
      const url = `URL="person:${encodeURIComponent(name)}"`;
      dotLines.push(`  "${name}" [label="${name}"${url ? ", " + url : ""}];`);
    });

    // 3. Define all relationships.
    for (const person of data.persons) {
      const childNode = `"${person.name}"`;
      if (person.mother && person.father) {
        const parentsNode = `"${person.mother}_${person.father}_family"`;
        dotLines.push(
          `  ${parentsNode} [shape=point];`,
          `  "${person.mother}" -> ${parentsNode};`,
          `  "${person.father}" -> ${parentsNode};`,
          `  ${parentsNode} -> ${childNode} [dir=forward, arrowhead=normal];`
        );
      } else if (person.mother) {
        dotLines.push(
          `  "${person.mother}" -> ${childNode} [dir=forward, arrowhead=normal];`
        );
      } else if (person.father) {
        dotLines.push(
          `  "${person.father}" -> ${childNode} [dir=forward, arrowhead=normal];`
        );
      }
    }

    dotLines.push("}");
    return dotLines.join("\n");
  }

  async function genealogySvgString(data) {
    const dotString = genealogyDotString(data);

    try {
      const graphviz = await graphvizPromise;
      return graphviz.layout(dotString, "svg", "dot");
    } catch (error) {
      console.error("Error rendering graph:", error);
      return `<p>Error rendering graph: ${error.message}</p>`;
    }
  }

  async function initializeGraph() {
    // --- Get references to dialog elements ---
    const dialog = document.getElementById("edit-dialog");
    const form = document.getElementById("edit-form");
    const originalNameInput = document.getElementById("original-name");
    const nameInput = document.getElementById("person-name");
    const motherInput = document.getElementById("person-mother");
    const fatherInput = document.getElementById("person-father");
    const saveButton = document.getElementById("save-button");
    const cancelButton = document.getElementById("cancel-button");
    const removeButton = document.getElementById("remove-button");

    // --- Get references to toolbar buttons ---
    const addButton = document.getElementById("add-button");
    const clearButton = document.getElementById("clear-button");

    // --- Graph click handler ---
    const graphContainer = document.querySelector(".genealogy-graph");

    // --- Render the graph on page load ---
    if (graphContainer) {
      const svgString = await genealogySvgString(genealogyData);
      graphContainer.innerHTML = svgString;
    }

    if (graphContainer) {
      // --- Add click event listener to the graph container ---
      graphContainer.addEventListener("click", (event) => {
        const targetLink = event.target.closest("a");

        if (!targetLink) {
          return;
        }

        const url =
          targetLink.getAttribute("xlink:href") ||
          targetLink.getAttribute("href");

        if (url && url.startsWith("person:")) {
          event.preventDefault();

          const personName = decodeURIComponent(
            url.substring("person:".length)
          );

          const personData = genealogyData.persons.find(
            (p) => p.name === personName
          );
          if (personData) {
            openEditDialog(personData);
          }
        }
      });
    }

    // --- Dialog functions ---
    function openEditDialog(person) {
      originalNameInput.value = person.name;
      nameInput.value = person.name;
      motherInput.value = person.mother || "";
      fatherInput.value = person.father || "";
      dialog.style.display = "flex";
    }

    function closeEditDialog() {
      dialog.style.display = "none";
    }

    // --- Dialog event listeners ---
    cancelButton.addEventListener("click", closeEditDialog);

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const updatedPerson = {
        name: nameInput.value,
        mother: motherInput.value || null,
        father: fatherInput.value || null,
      };

      genealogyData.updatePerson(originalNameInput.value, updatedPerson);

      console.log("Updated data:", genealogyData);

      // Re-render the graph with the updated data
      if (graphContainer) {
        const newSvgString = await genealogySvgString(genealogyData);
        graphContainer.innerHTML = newSvgString;
        console.log("Updated svg:", newSvgString);
      }

      closeEditDialog();
    });

    removeButton.addEventListener("click", async () => {
      const personName = originalNameInput.value;
      if (confirm(`Are you sure you want to remove ${personName}?`)) {
        genealogyData.removePerson(personName);

        // Re-render the graph with the updated data
        if (graphContainer) {
          const newSvgString = await genealogySvgString(genealogyData);
          graphContainer.innerHTML = newSvgString;
        }

        closeEditDialog();
      }
    });

    // --- Toolbar button event listeners ---
    addButton.addEventListener("click", () => {
      const newPerson = {
        name: "",
        mother: null,
        father: null,
      };
      openEditDialog(newPerson);
    });

    clearButton.addEventListener("click", async () => {
      if (confirm("Are you sure you want to clear all genealogy data?")) {
        genealogyData.clear();

        // Re-render the graph with empty data
        if (graphContainer) {
          const newSvgString = await genealogySvgString(genealogyData);
          graphContainer.innerHTML = newSvgString;
        }
      }
    });
  }

  // Initialize the graph when the DOM is ready
  document.addEventListener("DOMContentLoaded", initializeGraph);
</script>
