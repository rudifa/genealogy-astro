---
import {
  supportedLanguages,
  translations as allTranslations,
  type Language,
} from "../i18n/index.ts";

export interface Props {
  currentLanguage: Language;
  translations: any;
}

const {currentLanguage} = Astro.props;
---

<div class='language-switcher' data-cy='language-switcher'>
  <select
    id='language-select'
    class='language-select'
    data-cy='language-select'>
    {
      supportedLanguages.map((lang) => (
        <option
          value={lang.code}
          selected={lang.code === currentLanguage}
          data-cy={`lang-${lang.code}`}>
          {lang.flag} {lang.nativeName}
        </option>
      ))
    }
  </select>
</div>

<style>
  .language-switcher {
    display: flex;
    justify-content: center;
    margin-bottom: 12px;
    padding: 8px;
    border-bottom: 1px solid #e9ecef;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    border-radius: 6px 6px 0 0;
  }

  .language-select {
    padding: 8px 12px;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    min-width: 150px;
    text-align: center;
  }

  .language-select:hover {
    border-color: #adb5bd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .language-select:focus {
    outline: none;
    border-color: #007acc;
    box-shadow:
      0 0 0 3px rgba(0, 122, 204, 0.15),
      0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .language-select option {
    padding: 10px 14px;
    font-size: 14px;
    font-weight: 500;
    text-align: left;
  }

  @media (max-width: 768px) {
    .language-switcher {
      margin-bottom: 10px;
      padding: 6px;
    }

    .language-select {
      font-size: 13px;
      padding: 6px 10px;
      min-width: 130px;
    }

    .language-select option {
      font-size: 13px;
      padding: 8px 12px;
    }
  }

  @media (max-width: 480px) {
    .language-select {
      font-size: 12px;
      padding: 5px 8px;
      min-width: 120px;
    }

    .language-select option {
      font-size: 12px;
      padding: 6px 10px;
    }
  }
</style>

<script
  is:inline
  type='module'
  define:vars={{
    allTranslations,
  }}
>
  // 1. Imports
  import {AppLanguages} from "/utility/AppLanguages.js";

  // 2. Singleton/instance setup
  const appLanguages = AppLanguages.ensureOneExists();

  // 3. Initialization
  appLanguages.setAllTranslations(allTranslations);

  // 4. Subscriptions
  appLanguages.subscribe((newTranslations) => {
    console.log("üëç LanguageSwitcher: newTranslations:", newTranslations);
    // const selectedLanguage = appLanguages.getLanguage();
  }, "LanguageSwitcher");

  // 5. DOM element references
  const languageSelect = document.getElementById("language-select");

  // 6. Event listeners
  if (languageSelect) {
    languageSelect.addEventListener("change", function (event) {
      console.log("üçã LanguageSwitcher: change event:", event.target.value);
      const selectedLanguage = event.target.value;
      appLanguages.setLanguage(selectedLanguage);
      updateURL(selectedLanguage);
      updatePageLanguage(selectedLanguage);
      // No need to call updateSelectorValue here; select is already in sync
    });
  }

  // 7. Main logic (function calls)
  detectAndSetLanguage();

  // 8. Helper functions
  function detectAndSetLanguage() {
    const availableLangs = appLanguages.getAvailableLanguages();
    const currentLang = appLanguages.getLanguage();
    // Extract the language from the URL
    // Example: https://genealogy-astro.vercel.app/?lang=de
    const urlParams = new URLSearchParams(window.location.search);
    const urlLang = urlParams.get("lang");
    const browserLang = navigator.language?.slice(0, 2);

    let selectedLang = availableLangs[0]; // Default to the first available language

    if (urlLang && availableLangs.includes(urlLang)) {
      selectedLang = urlLang;
    } else if (currentLang && availableLangs.includes(currentLang)) {
      selectedLang = currentLang;
    } else if (browserLang && availableLangs.includes(browserLang)) {
      selectedLang = browserLang;
    }

    console.log(
      "üçÖ LanguageSwitcher: detectAndSetLanguage: urlLang:",
      urlLang,
      "currentLang:",
      currentLang,
      "browserLang:",
      browserLang,
      "availableLangs:",
      availableLangs,
      "selectedLang:",
      selectedLang
    );

    // Propagate the language change to the targets
    appLanguages.setLanguage(selectedLang);
    updateURL(selectedLang);
    updatePageLanguage(selectedLang);
    updateSelectorValue(selectedLang);
  }

  function updateURL(language) {
    const url = new URL(window.location.href);
    url.searchParams.set("lang", language);
    window.history.replaceState({}, "", url.toString());
  }

  function updatePageLanguage(language) {
    console.log("üçÖ LanguageSwitcher: updatePageLanguage:", language);

    const t = appLanguages.getTranslations(language);

    // Update page title and meta
    document.title = t.pageTitle;
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute("content", t.pageDescription);
    }
    document.documentElement.lang = language;
  }

  function updateSelectorValue(language) {
    console.log("üçÖ LanguageSwitcher: updateSelectorValue:", language);
    if (languageSelect && languageSelect.value !== language) {
      languageSelect.value = language;
    }
  }
</script>
